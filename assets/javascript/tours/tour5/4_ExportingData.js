let exportingData = [
	{
		text:'<h2>'
		+  'Welcome to Exporting Data'
		+'</h2>'
		+'<p>'
		+  'This lesson builds on the previous one to introduce some of the practicalities of exporting data from your model for analysis. '
		+  'We will introduce some useful primitives and tricks for exporting data from your model.'
		+'</p>'
		+'<p>'
		+  'In this lesson, you will:'
		+'</p>'
		+'<ul>'
		+  '<li>learn about basic export primitives;</li>'
		+  '<li>be introduced to BehaviorSpace;</li>'
		+  '<li>practice analysing model output.</li>'
		+'</ul>',
	},
	{
		text:'<p>'
		+  'In the desktop version of NetLogo, you can easily create batch experiments with the use of <b>BehaviorSpace</b>.'
		+'</p>'
		+'<p>'
		+  'BehaviorSpace allows you to create experiments by first specifying which parameters to vary (with specified values or ranges) and testing all combinations of parameters. '
		+  'Then, you can measure these runs with specified measures (reporters), specify how long and how many times to run the model, '
		+  'and when to measure each run. BehaviorSpace will then put out a file with all parameters and specified measures, like this:'
		+'</p>'
		+'<table>'
		+'    <tr>'
		+'        <td>[run number]</td>'
		+'        <td>random-seed</td>'
		+'        <td>GrainTradeRate</td>'
		+'        <td>harvest-calories</td>'
		+'        <td>reproduction</td>'
		+'        <td>buying-radius</td>'
		+'        <td>life-expectancy</td>'
		+'        <td>harvest-amount</td>'
		+'        <td>number-Gauls</td>'
		+'        <td>weighted-trade-choice</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>66</td>'
		+'        <td>0</td>'
		+'        <td>20</td>'
		+'        <td>4</td>'
		+'        <td>3</td>'
		+'        <td>10</td>'
		+'        <td>50</td>'
		+'        <td>20</td>'
		+'        <td>150</td>'
		+'        <td>100</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>65</td>'
		+'        <td>0</td>'
		+'        <td>20</td>'
		+'        <td>4</td>'
		+'        <td>3</td>'
		+'        <td>10</td>'
		+'        <td>50</td>'
		+'        <td>20</td>'
		+'        <td>150</td>'
		+'        <td>100</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>64</td>'
		+'        <td>0</td>'
		+'        <td>20</td>'
		+'        <td>4</td>'
		+'        <td>3</td>'
		+'        <td>10</td>'
		+'        <td>50</td>'
		+'        <td>20</td>'
		+'        <td>150</td>'
		+'        <td>100</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>60</td>'
		+'        <td>0</td>'
		+'        <td>20</td>'
		+'        <td>4</td>'
		+'        <td>3</td>'
		+'        <td>10</td>'
		+'        <td>50</td>'
		+'        <td>20</td>'
		+'        <td>150</td>'
		+'        <td>90</td>'
		+'    </tr>'
		+'</table>'
	},
	{
		text:'<p>'
		+  'Sometimes the measures in the BehaviorSpace will give you all you need. '
		+  'However, other times the format of the generated file is not ideal for your analysis or you might have to collect additional information. '
		+'</p>'
		+'<p>'
		+  'In such cases, you will need to write your own procedure to export the desired data in the desired format.'
		+'</p>'
	},
	{
		text:'<p>'
		+  'Unfortunately, BehaviorSpace is not yet supported in Netlogo web. However, you can still create experiments and export data in Netlogo web!'
		+'</p>'
		+'<p>'
		+  'For example, there are several export primitives available for Netlogo, such as <code class="codeABMA"> export-view <b>filename</b></code> '
		+  '<code class="codeABMA"> export-output <b>filename</b></code> <code class="codeABMA"> export-plot <b>plotname</b> <b>filename</b></code> '
		+  '<code class="codeABMA"> export-all-plots <b>filename</b></code> <code class="codeABMA"> export-world <b>filename</b></code>, '
		+  'where the bold text is replaced with the relevant output.'
		+'</p>',
		attachTo:{
			on: 'left',
			element: '.netlogo-tab-area',
		},	
	},
	{
		text:'<p>'
		+  'Click on the Command Center tab.'
		+'</p>',
		attachTo:{
			on: 'left',
			element: '.netlogo-tab-area .netlogo-tab:nth-of-type(1)',
		},
		complexAdvanceOn: function() {
			advanceOnTabs({tab:'showConsole'}); 
		},
	},
	{
		text:'<p>'
		+  'In the command center, type <code class="codeABMA">export-view "AmphorABM.png"</code> and press enter. This should download a PNG showing the model\'s view.'
		+'</p>', 
		attachTo:{
			on: 'left',
			element: ()=>{return document.querySelector('.netlogo-tab-content, .netlogo-command-center')},
		},
		complexAdvanceOn: function() {
			advanceOnCommand({}); 
		},
	},
	{
		text:'<p>'
		+  'In many cases, a plain CSV file will be best for data analysis. To generate this, we will first output values to the command center and then use '
		+  '<code class="codeABMA">export-ouput</code> to create a CSV file. On the desktop version, you can also do this, '
		+  'or use the <a href = "https://ccl.northwestern.edu/netlogo/docs/programming.html#file-io " target="_blank" rel="noopener noreferrer">file primitives<\a>.'
		+'</p>'
		+'<p>'
		+  'We will run a couple of experiments which vary <code class="sliderName">weighted-trade-choice</code> and <code class="sliderName">metals?</code>. '
		+  'We are interested in the population (in total and of each lineage) and amphorae numbers as output measures. '
		+  'When you are ready, open the code tab.'
		+'</p>',
		attachTo:{
			on: 'left',
			element: '.netlogo-tab-area',
		},
		complexAdvanceOn: function() {
			advanceOnTabs({tab:'showCode'});  
		},
	},
	{
		text:'<p>'
		+  'First, let\'s create an empty procedure named <code class="codeABMA">measure</code> at the bottom of the code.'
		+'</p>',
		attachTo:{
			on: 'left',
			element: ()=>{return document.querySelector('#netlogo-code-tab')},
		},
		advanceExampleCode: {
			solution:'to measure\nend\n',
			codeExample: function() {
				addExampleCode({text:'\n\nto measure\nend\n', insertAtText:'end', instance:33});
			},		
			fullCode:`globals [\n  grass\n  earth-patches\n  water-patches\n  littoral-patches\n  mine-patches\n  total-harvest\n  total-amphora\n]\n\nbreed [\n  lineageA lineageAs;; Gaulish agents\n]\n\nbreed [\n  lineageAminers lineageAminer ;; mining families, not used in today's demo\n]\n\nbreed [\n  lineageB1 lineageB1s;; Etruscan Colonist agents\n]\n\nbreed [\n  lineageB2 lineageB2s;; Greek colonist agents\n]\n\nturtles-own [\n  birth-tick\n  a  ;; used to record your x coordinate\n  b  ;; used to record your y coordinate\n  trading-costs\n  thisDistance\n  energy\n  storage\n  GreekWine\n  EtruscanWine\n  metal\n  WinePurchase\n  MetalPurchase\n  GrainPurchase\n  amphoraeAssemblage ;; Etruscan amphorae--default\n  GreekAmphoraeAssemblage ;; Greek amphorae\n  wealth ;; money--trade grain for this\n  trade-partners\n\n]\n\nlineageA-own [\n  myFarm\n]\n\nlineageAminers-own [\n  myMine\n]\n\nlineageB1-own [\n  myVineyard\n]\n\nlineageB2-own [\n  myVineyard\n]\n\npatches-own [\n  owned?\n  countdown\n]\n\n\nto setup\n  ca\n  reset-ticks\n\n  ;; here I'm setting the world. Water isn't necessary, but it's aesthetically pleasing\n  ;; so I'm arbitrarily making the southern quadrant water\n\n  set water-patches patches with [ pycor <= -10 ]\n  ask water-patches [set pcolor blue]\n\n\n  ;;littoral patches are necessary, as it's where wine can be grown. Here I'm making a thin\n  ;; band of coast where Etruscans and Greeks can settle\n\n  set littoral-patches patches with [pycor >= -10 and pycor <= -6 ]\n  ask littoral-patches [set pcolor lime]\n\n  ;;the rest of the landscape is regular 'land', so here I'm coloring these patches. This is\n  ;;where the Gaulish farmers can live.\n\n  set earth-patches patches with [ pycor > -6 ]\n  ask earth-patches [ set pcolor one-of [ green green brown ] ]\n ; ask earth-patches [ ifelse random-float 0.5 [set pcolor green][ set pcolor brown] ]\n  ask earth-patches [ set countdown random grass-regrowth-time ] ;;a slider that says how many ticks a patch will be productive. The lower it is, the more frequently farmed fields decay\n\n  ;; don't worry about metals for today, but there's archaeological evidence that metal was mined\n  ;; and traded for wine.\n\n  if metals? [\n    set mine-patches patches with [ pycor > 24 ]\n    ask mine-patches [\n      ;; I'm sure now that there's a much more elegant way to do this\n      ;; but when I wrote this code my coding skills weren't the *best*\n      ;; so what this does is for every 15 green patches there is 1 grey patch\n\n      set pcolor one-of [green green green green green green green green green green green green green green green grey] ] ]\n\n  create-lineageA number-Gauls\n  [\n    set birth-tick ticks\n    set shape "person"\n    set size 1\n    setxy random-xcor random-ycor\n    ;;set label lineageA\n    set energy 20\n\n    ;;agents consume energy in this model so they need to be instantiated with some amount of energy, so they don't die\n    ;;20 is fairly arbitrary. It depletes quickly, but is essential for model instantiation.\n    ;; importantly, it's below the reproduction threshold, so agents don't show up and have babies right away.\n    ;; they have to farm/trade before they can reproduce.\n\n    set color red\n    move-to one-of earth-patches\n    set owned? true\n    ;;    set trading-costs 1\n  ]\n\n  if metals? [\n    create-lineageAminers number-mining-Gauls [\n      set birth-tick ticks\n      set shape "person"\n      set size 1\n      setxy random-xcor random-ycor\n      set energy 20\n      set color black\n      move-to one-of mine-patches with [ pcolor = grey ]\n    ] ]\n\n\nend\n\nto go\n\n  ;;we don't want the model to keep going if all our agents are dead\n  if not any? turtles [ stop ]\n\n  ;;final timestep basically corresponds to the beginning of the Roman period, but is somewhat arbitrary. Can be changed.\n  if ticks = 500 [ stop ]\n  check-ownership\n\n  ask lineageA [\n    reproduceGauls\n    make-my-farm\n    plant\n    harvest\n    eat-grain\n    store-grain\n    buystuff\n    ;;  more-farms\n    moveCloser\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  ask lineageAminers [\n    eat-grain\n    extractMinerals\n    ;   TradeMetal\n    reproduceMiners\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  if ticks = Etruscan-arrival [\n    create-lineageB1 1 [\n      set birth-tick ticks\n      set shape "plant"\n      set size 1\n      ;;set label lineageA\n      set energy 55\n      set EtruscanWine 20\n      set color blue\n      move-to one-of littoral-patches with [pcolor = lime ]\n      set owned? true\n      landing-Etruscan-colonists\n\n    ]\n  ]\n\n  if two-colonist-populations? [\n    if ticks = Greek-arrival [\n      create-lineageB2 1 [\n        set birth-tick ticks\n        set shape "plant"\n        set size 1\n        ;;set label lineageA\n        set energy 55\n        set GreekWine 20\n        set color orange\n        move-to one-of littoral-patches  with [pcolor = lime ]\n        set owned? true\n        landing-Greek-colonists\n      ] ] ]\n\n\n  ask lineageB1 [\n    TradeWineEtruscans\n    reproduceColonists\n    consumeEtruscanWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineEtruscans\n    death\n  ]\n\n  ask lineageB2 [\n    TradeWineGreeks\n    reproduceColonists\n    consumeGreekWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineGreeks\n    death\n  ]\n\n  ;; we don't want agents to live forever, so here we initiate a death condition (aside from running out of energy).\n  ;; the life-expectancy mark is set on the slider, and defaults to 33--the age I was when I finished my PhD.\n  ;; This, however, may be a little low (even if finishing a PhD feels like death) so it's best to set it around 50.\n  ;; How this works is that when an agent reaches one more than the number of ticks set by the life expectancy slider\n  ;; they choose a random number between 0 and 100, and if the number is less than 50, they die.\n\n  ask turtles [\n    if ticks - birth-tick > life-expectancy [\n      if random-float 100 < 50 [\n        die ]\n    ] ]\n\n\n\n  ;; catch to keep carrying capacity low. The model almost never reaches these issues now, but it's just a catch.\n  ask lineageA [\n    if count lineageA > 1000 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageAminers [\n    if count lineageAminers > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB1 [\n    if count lineageB1 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB2 [\n    if count lineageB2 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask patches [grow-grass]\n  ask patches [patch-degrade]\n\n\n  tick\n\nend\n\nto reproduceGauls  ;; agents procedure\n  if ticks - birth-tick >= 10 [\n    if storage >= 50 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (storage / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n\n      set birth-tick ticks\n\n\n    ] ]\n\n\nend\n\n\n;;if Gaulish agents are spending too much to get wine they adjust their location\nto moveCloser\n  ask lineageA [\n    if pcolor = brown [\n      if trading-costs > 10 [\n        move-to one-of patches with [pycor >= -10 and pycor <= -6  ] ]\n      if trading-costs < 10 [\n        move-to one-of patches with [pcolor = green ] ]\n      set storage storage - 2 ]\n  ]\nend\n\nto regrow\n  ;; a simple way to enable the world to go back to it's basic state. Since we track if the patches are farmed based on color\n  ask patches [ if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ] ]\n  ;;an agent could plant but not harvest, and then die, and if we don't have this catch the patches will be 'unusable' for future agents\n  ;;so in the event an agent dies before harvest (brown) the world can regrow at the end of every tick\n\n  ask patches [ if pcolor = red\n    [set pcolor lime ] ]\n\n  ask patches [ if pcolor = cyan\n    [set pcolor green ]\n  ]\nend\n\nto reproduceMiners  ;; agents procedure\n  if ticks - birth-tick  >= 10 [\n    if energy >= 40 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n      ;;   move-to one-of mine-patches with [not any? turtles-here] ]\n      set birth-tick ticks\n      ;;    move-to one-of mine-patches with [ pcolor = grey ]\n      ;;     if owned? = true [\n      ;;    move-to one-of patches with [owned? = false ] ]\n      ;;    set owned? true\n    ] ]\n\n\nend\n\nto reproduceColonists\n  if ticks - birth-tick  >= 10 [\n    if energy >= 60 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1 [ rt random-float 360 fd 1 ]\n        ;;   move-to one-of littoral-patches with [not any? turtles-here]  ]\n        set birth-tick ticks\n        if pcolor = blue [ move-to one-of littoral-patches with [ pcolor = lime ]\n          ;;   if owned? = true [\n          ;;    move-to one-of littoral-patches with [owned? = false ] ]\n          ;;   set owned? true\n        ] ] ] ]\n\n\nend\n;; I would like to only have 1 turtle per patch! So this makes turtles wander till they find an empty patch.\nto go-until-empty-here  ;; turtle procedure\n  ask turtles [\n    fd 1\n    while [any? other turtles-here]\n      [ fd 1 ]\n  ]\n  tick\nend\n\nto grow-grass  ;; patch procedure\n               ;; countdown on brown patches: if reach 0, grow some grass\n  if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ]\nend\n\nto patch-degrade  ;; patch procedure\n  if pcolor = cyan [\n    ifelse countdown <= 0\n    [  set pcolor brown\n      set countdown 5 ]\n    [  set countdown countdown - 1 ]\n  ]\nend\n\nto extractMinerals\n  if  pcolor = grey [\n    set metal metal + 5\n    set energy energy + 1 ]\n  if  pcolor = green  [\n    set energy energy + 10 ]\nend\n\nto death  ;; turtle procedure\n          ;  when energy dips below zero, die\n  if energy + storage < 0 [ die ]\n\nend\n\n\nto TradeWineEtruscans\n  ;   if random-float 100 < 5 [\n  ask lineageB1 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if EtruscanWine >= 10 [\n          ask one-of lineageA [\n            set a xcor\n            set b ycor\n            if  storage > 60 [\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10    ] ]\n          set thisDistance distancexy a b\n          set energy energy + GrainTradeRate\n          set EtruscanWine EtruscanWine - 10\n          set energy energy -  thisDistance * 0.25 ]\n\n      ]\n    ] ] ;]\n        ;;   if ticks > Greek-arrival]\nend\n\nto TradeWineGreeks\n  ;  if random-float 100 < 5 [\n  ask lineageB2 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if GreekWine >= 10 [\n          ask one-of turtles [\n            set a xcor\n            set b ycor\n            if storage > 60 [\n              if breed != lineageB1 [\n                set energy energy - GrainTradeRate\n                set GreekWine GreekWine + 10  ]\n              set thisDistance distancexy a b\n              set energy energy + GrainTradeRate\n              set GreekWine GreekWine - 10\n              set energy energy -  thisDistance * 0.25\n              set trading-costs thisDistance  ]]\n\n        ]\n      ] ] ] ; ]\nend\n\n\nto buystuff\n\n  ;; this is the way that Gauls initiate trade, and is a central part of this model\n  ;; what this does is when a Gaul has lots of grain they can trade it in for 'wealth' (leaving room for barter for prices later on)\n  ;; Gauls will prefer to trade with those colonists that are within their buying radius, as wine isn't a necessary good\n  ;; When both Etruscans and Greeks are on the landscape, Gauls will draw a random number and compare that number to the weighted trade choice number\n  ;; which weights the preference for different types of wine\n\n  if random-float 100 < 1 [\n    if ticks > Etruscan-arrival [\n      if ticks <= Greek-arrival [\n        if count lineageB1 > 1 [\n          ask lineageA [\n            if storage >= 60 [\n              ask one-of lineageB1  [\n                set a xcor\n                set b ycor\n                if EtruscanWine > 10 [\n                  set energy energy + GrainTradeRate\n                  set EtruscanWine EtruscanWine - 10 ] ]\n              set thisDistance  distancexy a b\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10\n              set storage storage -  thisDistance * 0.5 ]\n          ] ] ]\n\n      if ticks > Greek-arrival [\n        let chance random 100\n        if chance < weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB2 > 1 [\n                ask one-of lineageB2 [\n                  set a xcor\n                  set b ycor\n                  if GreekWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set GreekWine GreekWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set GreekWine GreekWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ] ] ]\n\n        if chance > weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB1 > 1 [\n                ask one-of lineageB1 [\n                  set a xcor\n                  set b ycor\n                  if EtruscanWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set EtruscanWine EtruscanWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set EtruscanWine EtruscanWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ]\n          ]\n        ]\n      ]\n    ]\n  ]\n\nend\n\nto consumeGreekWine\n  if GreekWine > 1 [\n    set GreekWine GreekWine - 1\n  ]\nend\n\n\nto consumeEtruscanWine\n  if EtruscanWine > 1 [\n    set EtruscanWine EtruscanWine - 1\n  ]\nend\n\nto decayMetals\n  if metal > 1 [\n    set metal metal - 1\n  ]\nend\n\n;; each tick Gaulish agents take fallow fields and plant them. They gain a certain amount of energy from fields and can only extract\n;; more energy if they plant more\nto make-my-farm\n  if pcolor != brown [\n    set pcolor cyan ;;\n  ]\nend\n\nto plant\n  ;;ethnographically, people use beer parties to help with planting costs, so here wine makes planting easier!\n  if pcolor != brown [\n    set pcolor cyan ;; this way we can differentiate between unfarmed patches, dead patches, and farmed patches\n    set energy energy - planting-calories  ;; agents expend energy by planting\n    if (EtruscanWine > 1) or (GreekWine > 1)\n    [ set energy energy + 1 ]\n    death\n  ]\nend\n\nto harvest\n  if pcolor = cyan [ ;;again, only those patches with the pcolor cyan can be harvested as a field\n    set energy energy + harvest-amount   ;; harvest amount is how much agents get from each farm patch\n    set energy energy - harvest-calories  ;; it costs calories to harvest grain\n    set total-harvest total-harvest + harvest-amount\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    death\n  ]\nend\n\nto eat-grain\n  set energy energy - 1 ;; agents basic metabolic needs, they need to eat 1 each year to survive\nend\n\nto  store-grain\n  set storage storage + energy\n  set energy energy - energy\n  death\n\nend\n\n;; what I need to do: agents look at how much they're charged for planting, keep that in their regular storage, then make an outside storage\n;; any extra grain they have can go in those coffers\n;; so I need to transfer immediate energy to stored energy\n;; and they only reproduce when their *stored* energy is high\n\nto check-ownership\n  ask patches [\n    if count turtles-here > 0\n    [ set owned? true ] ]\nend\n\nto landing-Greek-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set GreekWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto landing-Etruscan-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set EtruscanWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto plantVineyard\n  if pcolor != blue [\n    set pcolor red\n    set energy energy - planting-calories ;; agents are charged the same to plant wine as they are to plant grain\n    death ]\nend\n\nto harvestWineEtruscans\n  if pcolor = red [\n    set pcolor lime\n    set EtruscanWine EtruscanWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto harvestWineGreeks\n  if pcolor = red [\n    set pcolor lime\n    set GreekWine GreekWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto more-farms\n  death\n\nend\n\nto-report Etruscan-wine-wealth\n  report [EtruscanWine] of turtles\nend`,
		},
		complexAdvanceOn: function() {
			advanceOnRecompile();
		},
	},
	{
		text:'<p>'
		+  'We will be exporting data as a CSV, so we have to create a string where the value of each relevant input parameter and '
		+  'output measure is separated by a command and a space <code class="codeABMA">, </code>.'
		+'</p>'
		+'<p>'
		+  'In order to do this, we will use the <code class="codeABMA">word</code> primitive, which concatenates input to a string.'
		+'</p>'
		+'<p>'
		+  'We have add the code in for you, have a look at it. When you are ready, recompile.'
		+'</p>'
		+createMoreInfoBox({content:'<p>'
		+  '<code class="codeABMA">word</code> can also be very useful for creating unique filenames, '
		+  'for example by incorporating <code class="codeABMA">time-and-date</code>, '
		+  '<code class="codeABMA">user-input</code> or parameter values to ensure uniqueness of the file name. '
		+'</p>'}),
		attachTo:{
			on: 'left',
			element: ()=>{return document.querySelector('#netlogo-code-tab')},
		},
		codeExample: function() {
			addExampleCode({text:'  output-print (word weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)\n', insertAtText:'measure' });
		},	
		complexAdvanceOn: function() {
			advanceOnRecompile();
		},
	},
	{
		text:'<p>'
		+  'To test whether your measure procedure works correctly, '
		+  'let\'s update the <code class="codeABMA">measure</code> procedure so that it calls <code class="codeABMA">setup</code> and runs the model for 10 ticks. '
		+  'Recompile and then, go to the command center.'
		+'</p>',
		advanceExampleCode: {
			solution:'to measure\n  setup\n  repeat 10 [ go ]\n  output-print (word weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)\nend\n',
			codeExample: function() {
				addExampleCode({text:'  setup\n  repeat 10 [ go ]\n', insertAtText:'measure' });
			},		
			fullCode:`globals [\n  grass\n  earth-patches\n  water-patches\n  littoral-patches\n  mine-patches\n  total-harvest\n  total-amphora\n]\n\nbreed [\n  lineageA lineageAs;; Gaulish agents\n]\n\nbreed [\n  lineageAminers lineageAminer ;; mining families, not used in today's demo\n]\n\nbreed [\n  lineageB1 lineageB1s;; Etruscan Colonist agents\n]\n\nbreed [\n  lineageB2 lineageB2s;; Greek colonist agents\n]\n\nturtles-own [\n  birth-tick\n  a  ;; used to record your x coordinate\n  b  ;; used to record your y coordinate\n  trading-costs\n  thisDistance\n  energy\n  storage\n  GreekWine\n  EtruscanWine\n  metal\n  WinePurchase\n  MetalPurchase\n  GrainPurchase\n  amphoraeAssemblage ;; Etruscan amphorae--default\n  GreekAmphoraeAssemblage ;; Greek amphorae\n  wealth ;; money--trade grain for this\n  trade-partners\n\n]\n\nlineageA-own [\n  myFarm\n]\n\nlineageAminers-own [\n  myMine\n]\n\nlineageB1-own [\n  myVineyard\n]\n\nlineageB2-own [\n  myVineyard\n]\n\npatches-own [\n  owned?\n  countdown\n]\n\n\nto setup\n  ca\n  reset-ticks\n\n  ;; here I'm setting the world. Water isn't necessary, but it's aesthetically pleasing\n  ;; so I'm arbitrarily making the southern quadrant water\n\n  set water-patches patches with [ pycor <= -10 ]\n  ask water-patches [set pcolor blue]\n\n\n  ;;littoral patches are necessary, as it's where wine can be grown. Here I'm making a thin\n  ;; band of coast where Etruscans and Greeks can settle\n\n  set littoral-patches patches with [pycor >= -10 and pycor <= -6 ]\n  ask littoral-patches [set pcolor lime]\n\n  ;;the rest of the landscape is regular 'land', so here I'm coloring these patches. This is\n  ;;where the Gaulish farmers can live.\n\n  set earth-patches patches with [ pycor > -6 ]\n  ask earth-patches [ set pcolor one-of [ green green brown ] ]\n ; ask earth-patches [ ifelse random-float 0.5 [set pcolor green][ set pcolor brown] ]\n  ask earth-patches [ set countdown random grass-regrowth-time ] ;;a slider that says how many ticks a patch will be productive. The lower it is, the more frequently farmed fields decay\n\n  ;; don't worry about metals for today, but there's archaeological evidence that metal was mined\n  ;; and traded for wine.\n\n  if metals? [\n    set mine-patches patches with [ pycor > 24 ]\n    ask mine-patches [\n      ;; I'm sure now that there's a much more elegant way to do this\n      ;; but when I wrote this code my coding skills weren't the *best*\n      ;; so what this does is for every 15 green patches there is 1 grey patch\n\n      set pcolor one-of [green green green green green green green green green green green green green green green grey] ] ]\n\n  create-lineageA number-Gauls\n  [\n    set birth-tick ticks\n    set shape "person"\n    set size 1\n    setxy random-xcor random-ycor\n    ;;set label lineageA\n    set energy 20\n\n    ;;agents consume energy in this model so they need to be instantiated with some amount of energy, so they don't die\n    ;;20 is fairly arbitrary. It depletes quickly, but is essential for model instantiation.\n    ;; importantly, it's below the reproduction threshold, so agents don't show up and have babies right away.\n    ;; they have to farm/trade before they can reproduce.\n\n    set color red\n    move-to one-of earth-patches\n    set owned? true\n    ;;    set trading-costs 1\n  ]\n\n  if metals? [\n    create-lineageAminers number-mining-Gauls [\n      set birth-tick ticks\n      set shape "person"\n      set size 1\n      setxy random-xcor random-ycor\n      set energy 20\n      set color black\n      move-to one-of mine-patches with [ pcolor = grey ]\n    ] ]\n\n\nend\n\nto go\n\n  ;;we don't want the model to keep going if all our agents are dead\n  if not any? turtles [ stop ]\n\n  ;;final timestep basically corresponds to the beginning of the Roman period, but is somewhat arbitrary. Can be changed.\n  if ticks = 500 [ stop ]\n  check-ownership\n\n  ask lineageA [\n    reproduceGauls\n    make-my-farm\n    plant\n    harvest\n    eat-grain\n    store-grain\n    buystuff\n    ;;  more-farms\n    moveCloser\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  ask lineageAminers [\n    eat-grain\n    extractMinerals\n    ;   TradeMetal\n    reproduceMiners\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  if ticks = Etruscan-arrival [\n    create-lineageB1 1 [\n      set birth-tick ticks\n      set shape "plant"\n      set size 1\n      ;;set label lineageA\n      set energy 55\n      set EtruscanWine 20\n      set color blue\n      move-to one-of littoral-patches with [pcolor = lime ]\n      set owned? true\n      landing-Etruscan-colonists\n\n    ]\n  ]\n\n  if two-colonist-populations? [\n    if ticks = Greek-arrival [\n      create-lineageB2 1 [\n        set birth-tick ticks\n        set shape "plant"\n        set size 1\n        ;;set label lineageA\n        set energy 55\n        set GreekWine 20\n        set color orange\n        move-to one-of littoral-patches  with [pcolor = lime ]\n        set owned? true\n        landing-Greek-colonists\n      ] ] ]\n\n\n  ask lineageB1 [\n    TradeWineEtruscans\n    reproduceColonists\n    consumeEtruscanWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineEtruscans\n    death\n  ]\n\n  ask lineageB2 [\n    TradeWineGreeks\n    reproduceColonists\n    consumeGreekWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineGreeks\n    death\n  ]\n\n  ;; we don't want agents to live forever, so here we initiate a death condition (aside from running out of energy).\n  ;; the life-expectancy mark is set on the slider, and defaults to 33--the age I was when I finished my PhD.\n  ;; This, however, may be a little low (even if finishing a PhD feels like death) so it's best to set it around 50.\n  ;; How this works is that when an agent reaches one more than the number of ticks set by the life expectancy slider\n  ;; they choose a random number between 0 and 100, and if the number is less than 50, they die.\n\n  ask turtles [\n    if ticks - birth-tick > life-expectancy [\n      if random-float 100 < 50 [\n        die ]\n    ] ]\n\n\n\n  ;; catch to keep carrying capacity low. The model almost never reaches these issues now, but it's just a catch.\n  ask lineageA [\n    if count lineageA > 1000 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageAminers [\n    if count lineageAminers > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB1 [\n    if count lineageB1 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB2 [\n    if count lineageB2 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask patches [grow-grass]\n  ask patches [patch-degrade]\n\n\n  tick\n\nend\n\nto reproduceGauls  ;; agents procedure\n  if ticks - birth-tick >= 10 [\n    if storage >= 50 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (storage / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n\n      set birth-tick ticks\n\n\n    ] ]\n\n\nend\n\n\n;;if Gaulish agents are spending too much to get wine they adjust their location\nto moveCloser\n  ask lineageA [\n    if pcolor = brown [\n      if trading-costs > 10 [\n        move-to one-of patches with [pycor >= -10 and pycor <= -6  ] ]\n      if trading-costs < 10 [\n        move-to one-of patches with [pcolor = green ] ]\n      set storage storage - 2 ]\n  ]\nend\n\nto regrow\n  ;; a simple way to enable the world to go back to it's basic state. Since we track if the patches are farmed based on color\n  ask patches [ if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ] ]\n  ;;an agent could plant but not harvest, and then die, and if we don't have this catch the patches will be 'unusable' for future agents\n  ;;so in the event an agent dies before harvest (brown) the world can regrow at the end of every tick\n\n  ask patches [ if pcolor = red\n    [set pcolor lime ] ]\n\n  ask patches [ if pcolor = cyan\n    [set pcolor green ]\n  ]\nend\n\nto reproduceMiners  ;; agents procedure\n  if ticks - birth-tick  >= 10 [\n    if energy >= 40 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n      ;;   move-to one-of mine-patches with [not any? turtles-here] ]\n      set birth-tick ticks\n      ;;    move-to one-of mine-patches with [ pcolor = grey ]\n      ;;     if owned? = true [\n      ;;    move-to one-of patches with [owned? = false ] ]\n      ;;    set owned? true\n    ] ]\n\n\nend\n\nto reproduceColonists\n  if ticks - birth-tick  >= 10 [\n    if energy >= 60 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1 [ rt random-float 360 fd 1 ]\n        ;;   move-to one-of littoral-patches with [not any? turtles-here]  ]\n        set birth-tick ticks\n        if pcolor = blue [ move-to one-of littoral-patches with [ pcolor = lime ]\n          ;;   if owned? = true [\n          ;;    move-to one-of littoral-patches with [owned? = false ] ]\n          ;;   set owned? true\n        ] ] ] ]\n\n\nend\n;; I would like to only have 1 turtle per patch! So this makes turtles wander till they find an empty patch.\nto go-until-empty-here  ;; turtle procedure\n  ask turtles [\n    fd 1\n    while [any? other turtles-here]\n      [ fd 1 ]\n  ]\n  tick\nend\n\nto grow-grass  ;; patch procedure\n               ;; countdown on brown patches: if reach 0, grow some grass\n  if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ]\nend\n\nto patch-degrade  ;; patch procedure\n  if pcolor = cyan [\n    ifelse countdown <= 0\n    [  set pcolor brown\n      set countdown 5 ]\n    [  set countdown countdown - 1 ]\n  ]\nend\n\nto extractMinerals\n  if  pcolor = grey [\n    set metal metal + 5\n    set energy energy + 1 ]\n  if  pcolor = green  [\n    set energy energy + 10 ]\nend\n\nto death  ;; turtle procedure\n          ;  when energy dips below zero, die\n  if energy + storage < 0 [ die ]\n\nend\n\n\nto TradeWineEtruscans\n  ;   if random-float 100 < 5 [\n  ask lineageB1 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if EtruscanWine >= 10 [\n          ask one-of lineageA [\n            set a xcor\n            set b ycor\n            if  storage > 60 [\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10    ] ]\n          set thisDistance distancexy a b\n          set energy energy + GrainTradeRate\n          set EtruscanWine EtruscanWine - 10\n          set energy energy -  thisDistance * 0.25 ]\n\n      ]\n    ] ] ;]\n        ;;   if ticks > Greek-arrival]\nend\n\nto TradeWineGreeks\n  ;  if random-float 100 < 5 [\n  ask lineageB2 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if GreekWine >= 10 [\n          ask one-of turtles [\n            set a xcor\n            set b ycor\n            if storage > 60 [\n              if breed != lineageB1 [\n                set energy energy - GrainTradeRate\n                set GreekWine GreekWine + 10  ]\n              set thisDistance distancexy a b\n              set energy energy + GrainTradeRate\n              set GreekWine GreekWine - 10\n              set energy energy -  thisDistance * 0.25\n              set trading-costs thisDistance  ]]\n\n        ]\n      ] ] ] ; ]\nend\n\n\nto buystuff\n\n  ;; this is the way that Gauls initiate trade, and is a central part of this model\n  ;; what this does is when a Gaul has lots of grain they can trade it in for 'wealth' (leaving room for barter for prices later on)\n  ;; Gauls will prefer to trade with those colonists that are within their buying radius, as wine isn't a necessary good\n  ;; When both Etruscans and Greeks are on the landscape, Gauls will draw a random number and compare that number to the weighted trade choice number\n  ;; which weights the preference for different types of wine\n\n  if random-float 100 < 1 [\n    if ticks > Etruscan-arrival [\n      if ticks <= Greek-arrival [\n        if count lineageB1 > 1 [\n          ask lineageA [\n            if storage >= 60 [\n              ask one-of lineageB1  [\n                set a xcor\n                set b ycor\n                if EtruscanWine > 10 [\n                  set energy energy + GrainTradeRate\n                  set EtruscanWine EtruscanWine - 10 ] ]\n              set thisDistance  distancexy a b\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10\n              set storage storage -  thisDistance * 0.5 ]\n          ] ] ]\n\n      if ticks > Greek-arrival [\n        let chance random 100\n        if chance < weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB2 > 1 [\n                ask one-of lineageB2 [\n                  set a xcor\n                  set b ycor\n                  if GreekWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set GreekWine GreekWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set GreekWine GreekWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ] ] ]\n\n        if chance > weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB1 > 1 [\n                ask one-of lineageB1 [\n                  set a xcor\n                  set b ycor\n                  if EtruscanWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set EtruscanWine EtruscanWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set EtruscanWine EtruscanWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ]\n          ]\n        ]\n      ]\n    ]\n  ]\n\nend\n\nto consumeGreekWine\n  if GreekWine > 1 [\n    set GreekWine GreekWine - 1\n  ]\nend\n\n\nto consumeEtruscanWine\n  if EtruscanWine > 1 [\n    set EtruscanWine EtruscanWine - 1\n  ]\nend\n\nto decayMetals\n  if metal > 1 [\n    set metal metal - 1\n  ]\nend\n\n;; each tick Gaulish agents take fallow fields and plant them. They gain a certain amount of energy from fields and can only extract\n;; more energy if they plant more\nto make-my-farm\n  if pcolor != brown [\n    set pcolor cyan ;;\n  ]\nend\n\nto plant\n  ;;ethnographically, people use beer parties to help with planting costs, so here wine makes planting easier!\n  if pcolor != brown [\n    set pcolor cyan ;; this way we can differentiate between unfarmed patches, dead patches, and farmed patches\n    set energy energy - planting-calories  ;; agents expend energy by planting\n    if (EtruscanWine > 1) or (GreekWine > 1)\n    [ set energy energy + 1 ]\n    death\n  ]\nend\n\nto harvest\n  if pcolor = cyan [ ;;again, only those patches with the pcolor cyan can be harvested as a field\n    set energy energy + harvest-amount   ;; harvest amount is how much agents get from each farm patch\n    set energy energy - harvest-calories  ;; it costs calories to harvest grain\n    set total-harvest total-harvest + harvest-amount\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    death\n  ]\nend\n\nto eat-grain\n  set energy energy - 1 ;; agents basic metabolic needs, they need to eat 1 each year to survive\nend\n\nto  store-grain\n  set storage storage + energy\n  set energy energy - energy\n  death\n\nend\n\n;; what I need to do: agents look at how much they're charged for planting, keep that in their regular storage, then make an outside storage\n;; any extra grain they have can go in those coffers\n;; so I need to transfer immediate energy to stored energy\n;; and they only reproduce when their *stored* energy is high\n\nto check-ownership\n  ask patches [\n    if count turtles-here > 0\n    [ set owned? true ] ]\nend\n\nto landing-Greek-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set GreekWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto landing-Etruscan-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set EtruscanWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto plantVineyard\n  if pcolor != blue [\n    set pcolor red\n    set energy energy - planting-calories ;; agents are charged the same to plant wine as they are to plant grain\n    death ]\nend\n\nto harvestWineEtruscans\n  if pcolor = red [\n    set pcolor lime\n    set EtruscanWine EtruscanWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto harvestWineGreeks\n  if pcolor = red [\n    set pcolor lime\n    set GreekWine GreekWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto more-farms\n  death\n\nend\n\nto-report Etruscan-wine-wealth\n  report [EtruscanWine] of turtles\nend\n\nto measure\n  output-print (word weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)\nend\n`,
		},
		attachTo:{
			on: 'left',
			element: '.netlogo-tab-area',
		},
		complexAdvanceOn: function() {
			advanceOnRecompile();
		},
	},
	{
		text:'<p>'
		+  'In the command center, call the <code class="codeABMA">measure</code> procedure. '
		+  'If you did everything correctly, you should see the model output some values separated by commas.'
		+'</p>',
		attachTo:{
			on: 'left',
			element: ()=>{return document.querySelector('.netlogo-tab-content, .netlogo-command-center')},
		},
		complexAdvanceOn: function() {
			advanceOnCommand({}); 
		},
	},
	{
		text:'<p>'
		+  'Sometimes, you may want to export information about each individual turtle, instead of more global measures like here.'
		+'</p>'
		+'<p>'
		+  'In such a case you can ask each turtle (or patch) to output values as well. This can be particularly helpful if you want to analyze your simulation spatially e.g. with GIS.'
		+'</p>'
		+'<p>'
		+  'For example, we have added this procedure to your code:'
		+'</p>'
		+'<pre class="codeblockABMA">'
		+  'to export-turtles\n'
		+  '  output-print (word "turtle, breed, x, y, energy")\n'
		+  '  ask turtles [\n'
		+  '    output-print (word who ", " breed ", " xcor ", " ycor ", " energy)\n'
		+  '  ]\n'
		+  '  export-output "AmphorABM_turtles.csv"\n'
		+  'end\n'
		+'</pre>'
		+'<p>'
		+  'Recompile, clear the command center and call <code class="codeABMA">export-turtles</code> from the command-center. '
		+  'This should export a CSV file with information about each turtle\'s ID, breed, location, and energy value.'
		+'</p>',
		attachTo:{
			on: 'left',
			element: '.netlogo-tab-area',
		},
		codeExample: function() {
			addExampleCode({text:'\nto export-turtles\n  output-print (word "turtle, breed, x, y, energy")\n  ask turtles [\n    output-print (word who ", " breed ", " xcor ", " ycor ", " energy)\n  ]\n  export-output "AmphorABM_turtles.csv"\nend\n', insertAtText:'end', instance:34});
		},
	},
	{
		text:'<p>'
		+  'Now, let\'s create a procedure that can batch-run some experiments for us.'
		+'</p>'
		+'<p>'
		+  'At the bottom of the code, create a new procedure called <code class="codeABMA"> batch-run </code>.'
		+'</p>',
		attachTo:{
			on: 'left',
			element: ()=>{return document.querySelector('#netlogo-code-tab')},
		},
		advanceExampleCode: {
			solution:'to batch-run\nend\n',
			codeExample: function() {
				addExampleCode({text:'\n\nto batch-run\nend\n', insertAtText:'end', instance:35});
			},		
			fullCode: `globals [\n  grass\n  earth-patches\n  water-patches\n  littoral-patches\n  mine-patches\n  total-harvest\n  total-amphora\n]\n\nbreed [\n  lineageA lineageAs;; Gaulish agents\n]\n\nbreed [\n  lineageAminers lineageAminer ;; mining families, not used in today's demo\n]\n\nbreed [\n  lineageB1 lineageB1s;; Etruscan Colonist agents\n]\n\nbreed [\n  lineageB2 lineageB2s;; Greek colonist agents\n]\n\nturtles-own [\n  birth-tick\n  a  ;; used to record your x coordinate\n  b  ;; used to record your y coordinate\n  trading-costs\n  thisDistance\n  energy\n  storage\n  GreekWine\n  EtruscanWine\n  metal\n  WinePurchase\n  MetalPurchase\n  GrainPurchase\n  amphoraeAssemblage ;; Etruscan amphorae--default\n  GreekAmphoraeAssemblage ;; Greek amphorae\n  wealth ;; money--trade grain for this\n  trade-partners\n\n]\n\nlineageA-own [\n  myFarm\n]\n\nlineageAminers-own [\n  myMine\n]\n\nlineageB1-own [\n  myVineyard\n]\n\nlineageB2-own [\n  myVineyard\n]\n\npatches-own [\n  owned?\n  countdown\n]\n\n\nto setup\n  ca\n  reset-ticks\n\n  ;; here I'm setting the world. Water isn't necessary, but it's aesthetically pleasing\n  ;; so I'm arbitrarily making the southern quadrant water\n\n  set water-patches patches with [ pycor <= -10 ]\n  ask water-patches [set pcolor blue]\n\n\n  ;;littoral patches are necessary, as it's where wine can be grown. Here I'm making a thin\n  ;; band of coast where Etruscans and Greeks can settle\n\n  set littoral-patches patches with [pycor >= -10 and pycor <= -6 ]\n  ask littoral-patches [set pcolor lime]\n\n  ;;the rest of the landscape is regular 'land', so here I'm coloring these patches. This is\n  ;;where the Gaulish farmers can live.\n\n  set earth-patches patches with [ pycor > -6 ]\n  ask earth-patches [ set pcolor one-of [ green green brown ] ]\n ; ask earth-patches [ ifelse random-float 0.5 [set pcolor green][ set pcolor brown] ]\n  ask earth-patches [ set countdown random grass-regrowth-time ] ;;a slider that says how many ticks a patch will be productive. The lower it is, the more frequently farmed fields decay\n\n  ;; don't worry about metals for today, but there's archaeological evidence that metal was mined\n  ;; and traded for wine.\n\n  if metals? [\n    set mine-patches patches with [ pycor > 24 ]\n    ask mine-patches [\n      ;; I'm sure now that there's a much more elegant way to do this\n      ;; but when I wrote this code my coding skills weren't the *best*\n      ;; so what this does is for every 15 green patches there is 1 grey patch\n\n      set pcolor one-of [green green green green green green green green green green green green green green green grey] ] ]\n\n  create-lineageA number-Gauls\n  [\n    set birth-tick ticks\n    set shape "person"\n    set size 1\n    setxy random-xcor random-ycor\n    ;;set label lineageA\n    set energy 20\n\n    ;;agents consume energy in this model so they need to be instantiated with some amount of energy, so they don't die\n    ;;20 is fairly arbitrary. It depletes quickly, but is essential for model instantiation.\n    ;; importantly, it's below the reproduction threshold, so agents don't show up and have babies right away.\n    ;; they have to farm/trade before they can reproduce.\n\n    set color red\n    move-to one-of earth-patches\n    set owned? true\n    ;;    set trading-costs 1\n  ]\n\n  if metals? [\n    create-lineageAminers number-mining-Gauls [\n      set birth-tick ticks\n      set shape "person"\n      set size 1\n      setxy random-xcor random-ycor\n      set energy 20\n      set color black\n      move-to one-of mine-patches with [ pcolor = grey ]\n    ] ]\n\n\nend\n\nto go\n\n  ;;we don't want the model to keep going if all our agents are dead\n  if not any? turtles [ stop ]\n\n  ;;final timestep basically corresponds to the beginning of the Roman period, but is somewhat arbitrary. Can be changed.\n  if ticks = 500 [ stop ]\n  check-ownership\n\n  ask lineageA [\n    reproduceGauls\n    make-my-farm\n    plant\n    harvest\n    eat-grain\n    store-grain\n    buystuff\n    ;;  more-farms\n    moveCloser\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  ask lineageAminers [\n    eat-grain\n    extractMinerals\n    ;   TradeMetal\n    reproduceMiners\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  if ticks = Etruscan-arrival [\n    create-lineageB1 1 [\n      set birth-tick ticks\n      set shape "plant"\n      set size 1\n      ;;set label lineageA\n      set energy 55\n      set EtruscanWine 20\n      set color blue\n      move-to one-of littoral-patches with [pcolor = lime ]\n      set owned? true\n      landing-Etruscan-colonists\n\n    ]\n  ]\n\n  if two-colonist-populations? [\n    if ticks = Greek-arrival [\n      create-lineageB2 1 [\n        set birth-tick ticks\n        set shape "plant"\n        set size 1\n        ;;set label lineageA\n        set energy 55\n        set GreekWine 20\n        set color orange\n        move-to one-of littoral-patches  with [pcolor = lime ]\n        set owned? true\n        landing-Greek-colonists\n      ] ] ]\n\n\n  ask lineageB1 [\n    TradeWineEtruscans\n    reproduceColonists\n    consumeEtruscanWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineEtruscans\n    death\n  ]\n\n  ask lineageB2 [\n    TradeWineGreeks\n    reproduceColonists\n    consumeGreekWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineGreeks\n    death\n  ]\n\n  ;; we don't want agents to live forever, so here we initiate a death condition (aside from running out of energy).\n  ;; the life-expectancy mark is set on the slider, and defaults to 33--the age I was when I finished my PhD.\n  ;; This, however, may be a little low (even if finishing a PhD feels like death) so it's best to set it around 50.\n  ;; How this works is that when an agent reaches one more than the number of ticks set by the life expectancy slider\n  ;; they choose a random number between 0 and 100, and if the number is less than 50, they die.\n\n  ask turtles [\n    if ticks - birth-tick > life-expectancy [\n      if random-float 100 < 50 [\n        die ]\n    ] ]\n\n\n\n  ;; catch to keep carrying capacity low. The model almost never reaches these issues now, but it's just a catch.\n  ask lineageA [\n    if count lineageA > 1000 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageAminers [\n    if count lineageAminers > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB1 [\n    if count lineageB1 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB2 [\n    if count lineageB2 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask patches [grow-grass]\n  ask patches [patch-degrade]\n\n\n  tick\n\nend\n\nto reproduceGauls  ;; agents procedure\n  if ticks - birth-tick >= 10 [\n    if storage >= 50 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (storage / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n\n      set birth-tick ticks\n\n\n    ] ]\n\n\nend\n\n\n;;if Gaulish agents are spending too much to get wine they adjust their location\nto moveCloser\n  ask lineageA [\n    if pcolor = brown [\n      if trading-costs > 10 [\n        move-to one-of patches with [pycor >= -10 and pycor <= -6  ] ]\n      if trading-costs < 10 [\n        move-to one-of patches with [pcolor = green ] ]\n      set storage storage - 2 ]\n  ]\nend\n\nto regrow\n  ;; a simple way to enable the world to go back to it's basic state. Since we track if the patches are farmed based on color\n  ask patches [ if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ] ]\n  ;;an agent could plant but not harvest, and then die, and if we don't have this catch the patches will be 'unusable' for future agents\n  ;;so in the event an agent dies before harvest (brown) the world can regrow at the end of every tick\n\n  ask patches [ if pcolor = red\n    [set pcolor lime ] ]\n\n  ask patches [ if pcolor = cyan\n    [set pcolor green ]\n  ]\nend\n\nto reproduceMiners  ;; agents procedure\n  if ticks - birth-tick  >= 10 [\n    if energy >= 40 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n      ;;   move-to one-of mine-patches with [not any? turtles-here] ]\n      set birth-tick ticks\n      ;;    move-to one-of mine-patches with [ pcolor = grey ]\n      ;;     if owned? = true [\n      ;;    move-to one-of patches with [owned? = false ] ]\n      ;;    set owned? true\n    ] ]\n\n\nend\n\nto reproduceColonists\n  if ticks - birth-tick  >= 10 [\n    if energy >= 60 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1 [ rt random-float 360 fd 1 ]\n        ;;   move-to one-of littoral-patches with [not any? turtles-here]  ]\n        set birth-tick ticks\n        if pcolor = blue [ move-to one-of littoral-patches with [ pcolor = lime ]\n          ;;   if owned? = true [\n          ;;    move-to one-of littoral-patches with [owned? = false ] ]\n          ;;   set owned? true\n        ] ] ] ]\n\n\nend\n;; I would like to only have 1 turtle per patch! So this makes turtles wander till they find an empty patch.\nto go-until-empty-here  ;; turtle procedure\n  ask turtles [\n    fd 1\n    while [any? other turtles-here]\n      [ fd 1 ]\n  ]\n  tick\nend\n\nto grow-grass  ;; patch procedure\n               ;; countdown on brown patches: if reach 0, grow some grass\n  if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ]\nend\n\nto patch-degrade  ;; patch procedure\n  if pcolor = cyan [\n    ifelse countdown <= 0\n    [  set pcolor brown\n      set countdown 5 ]\n    [  set countdown countdown - 1 ]\n  ]\nend\n\nto extractMinerals\n  if  pcolor = grey [\n    set metal metal + 5\n    set energy energy + 1 ]\n  if  pcolor = green  [\n    set energy energy + 10 ]\nend\n\nto death  ;; turtle procedure\n          ;  when energy dips below zero, die\n  if energy + storage < 0 [ die ]\n\nend\n\n\nto TradeWineEtruscans\n  ;   if random-float 100 < 5 [\n  ask lineageB1 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if EtruscanWine >= 10 [\n          ask one-of lineageA [\n            set a xcor\n            set b ycor\n            if  storage > 60 [\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10    ] ]\n          set thisDistance distancexy a b\n          set energy energy + GrainTradeRate\n          set EtruscanWine EtruscanWine - 10\n          set energy energy -  thisDistance * 0.25 ]\n\n      ]\n    ] ] ;]\n        ;;   if ticks > Greek-arrival]\nend\n\nto TradeWineGreeks\n  ;  if random-float 100 < 5 [\n  ask lineageB2 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if GreekWine >= 10 [\n          ask one-of turtles [\n            set a xcor\n            set b ycor\n            if storage > 60 [\n              if breed != lineageB1 [\n                set energy energy - GrainTradeRate\n                set GreekWine GreekWine + 10  ]\n              set thisDistance distancexy a b\n              set energy energy + GrainTradeRate\n              set GreekWine GreekWine - 10\n              set energy energy -  thisDistance * 0.25\n              set trading-costs thisDistance  ]]\n\n        ]\n      ] ] ] ; ]\nend\n\n\nto buystuff\n\n  ;; this is the way that Gauls initiate trade, and is a central part of this model\n  ;; what this does is when a Gaul has lots of grain they can trade it in for 'wealth' (leaving room for barter for prices later on)\n  ;; Gauls will prefer to trade with those colonists that are within their buying radius, as wine isn't a necessary good\n  ;; When both Etruscans and Greeks are on the landscape, Gauls will draw a random number and compare that number to the weighted trade choice number\n  ;; which weights the preference for different types of wine\n\n  if random-float 100 < 1 [\n    if ticks > Etruscan-arrival [\n      if ticks <= Greek-arrival [\n        if count lineageB1 > 1 [\n          ask lineageA [\n            if storage >= 60 [\n              ask one-of lineageB1  [\n                set a xcor\n                set b ycor\n                if EtruscanWine > 10 [\n                  set energy energy + GrainTradeRate\n                  set EtruscanWine EtruscanWine - 10 ] ]\n              set thisDistance  distancexy a b\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10\n              set storage storage -  thisDistance * 0.5 ]\n          ] ] ]\n\n      if ticks > Greek-arrival [\n        let chance random 100\n        if chance < weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB2 > 1 [\n                ask one-of lineageB2 [\n                  set a xcor\n                  set b ycor\n                  if GreekWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set GreekWine GreekWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set GreekWine GreekWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ] ] ]\n\n        if chance > weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB1 > 1 [\n                ask one-of lineageB1 [\n                  set a xcor\n                  set b ycor\n                  if EtruscanWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set EtruscanWine EtruscanWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set EtruscanWine EtruscanWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ]\n          ]\n        ]\n      ]\n    ]\n  ]\n\nend\n\nto consumeGreekWine\n  if GreekWine > 1 [\n    set GreekWine GreekWine - 1\n  ]\nend\n\n\nto consumeEtruscanWine\n  if EtruscanWine > 1 [\n    set EtruscanWine EtruscanWine - 1\n  ]\nend\n\nto decayMetals\n  if metal > 1 [\n    set metal metal - 1\n  ]\nend\n\n;; each tick Gaulish agents take fallow fields and plant them. They gain a certain amount of energy from fields and can only extract\n;; more energy if they plant more\nto make-my-farm\n  if pcolor != brown [\n    set pcolor cyan ;;\n  ]\nend\n\nto plant\n  ;;ethnographically, people use beer parties to help with planting costs, so here wine makes planting easier!\n  if pcolor != brown [\n    set pcolor cyan ;; this way we can differentiate between unfarmed patches, dead patches, and farmed patches\n    set energy energy - planting-calories  ;; agents expend energy by planting\n    if (EtruscanWine > 1) or (GreekWine > 1)\n    [ set energy energy + 1 ]\n    death\n  ]\nend\n\nto harvest\n  if pcolor = cyan [ ;;again, only those patches with the pcolor cyan can be harvested as a field\n    set energy energy + harvest-amount   ;; harvest amount is how much agents get from each farm patch\n    set energy energy - harvest-calories  ;; it costs calories to harvest grain\n    set total-harvest total-harvest + harvest-amount\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    death\n  ]\nend\n\nto eat-grain\n  set energy energy - 1 ;; agents basic metabolic needs, they need to eat 1 each year to survive\nend\n\nto  store-grain\n  set storage storage + energy\n  set energy energy - energy\n  death\n\nend\n\n;; what I need to do: agents look at how much they're charged for planting, keep that in their regular storage, then make an outside storage\n;; any extra grain they have can go in those coffers\n;; so I need to transfer immediate energy to stored energy\n;; and they only reproduce when their *stored* energy is high\n\nto check-ownership\n  ask patches [\n    if count turtles-here > 0\n    [ set owned? true ] ]\nend\n\nto landing-Greek-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set GreekWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto landing-Etruscan-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set EtruscanWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto plantVineyard\n  if pcolor != blue [\n    set pcolor red\n    set energy energy - planting-calories ;; agents are charged the same to plant wine as they are to plant grain\n    death ]\nend\n\nto harvestWineEtruscans\n  if pcolor = red [\n    set pcolor lime\n    set EtruscanWine EtruscanWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto harvestWineGreeks\n  if pcolor = red [\n    set pcolor lime\n    set GreekWine GreekWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto more-farms\n  death\n\nend\n\nto-report Etruscan-wine-wealth\n  report [EtruscanWine] of turtles\nend\n\nto measure\n  setup\n  repeat 10 [ go ]\n  output-print (word weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)\nend\n\nto export-turtles\n  output-print (word "turtle, breed, x, y, energy")\n  ask turtles [\n    output-print (word who ", " breed ", " xcor ", " ycor ", " energy)\n  ]\n  export-output "AmphorABM_turtles.csv"\nend\n`,
		},
		complexAdvanceOn: function() {
			advanceOnRecompile();
		},
	},
	{
		text:'<p>'
		+  'Inside the <code class="codeABMA">batch-run</code> procedure we will vary <code class="sliderName">weighted-trade-choice</code> by taking 0 as minimum, '
		+  '100 as maximum, and using 25 as an increment, and <code class="sliderName">metals?</code> with true and false, with all possible combinations.'
		+'</p>'
		+'<p>'
		+  'For this, we will use a loop that increases <code class="sliderName">weighted-trade-choice</code> by 25 each time around until it reaches 100. '
		+  'Inside this loop, we will call <code class="codeABMA">measure</code> for both <code class="codeABMA">metals? = true</code> and <code class="codeABMA">metals? = false</code>.'
		+'</p>'
		+'<p>'
		+  'We have added this for you inside the <code class="codeABMA">batch-run</code> procedure write:'
		+'</p>'
		+'<pre class="codeblockABMA">'
		+  '  set weighted-trade-choice 0\n'
		+  '  while [weighted-trade-choice <= 100] [\n'
		+  '    set metals? true\n'
		+  '    measure\n'
		+  '    set metals? false\n'
		+  '    measure\n'
		+  '    set weighted-trade-choice weighted-trade-choice + 25\n'
		+  '  ]\n'
		+  '  clear-all'
		+'</pre>'
		+createMoreInfoBox({content:'<p>'
		+  'The <code class="codeABMA">clear-all</code> is needed here to create a blank slate after all experiments are run, otherwise the page may freeze.'
		+'</p>'}),
		attachTo:{
			on: 'left',
			element: ()=>{return document.querySelector('#netlogo-code-tab')},
		},
		codeExample: function() {
			addExampleCode({text:'  set weighted-trade-choice 0\n  while [weighted-trade-choice <= 100] [\n    set metals? true\n    measure\n    set metals? false\n    measure\n    set weighted-trade-choice weighted-trade-choice + 25\n  ]\n  clear-all\n', insertAtText:'batch-run'});
		},
		complexAdvanceOn: function() {
			advanceOnRecompile();
		},
	},
	{
		text:'<p>'
		+  'To test whether everything works as intended, in the command center, call <code class="codeABMA">batch-run</code>. <b>This may take up to half a minute</b>, '
		+  'but if you did everything correctly, a total of 10 new lines with comma-separated values should have been printed to the command center.'
		+'</p>',
		attachTo:{
			on: 'left',
			element: '.netlogo-tab-area',
		},
	},
	{
		text:'<p>'
		+  'Of course, you could just copy these lines to a CSV file manually and call it a day.'
		+'</p>'
		+'<p>'
		+  'However, let\'s take some extra steps so that the data is exported to a nicely formatted file at the end of the batch run to save us some effort later. '
		+  'Taking steps like this is particularly important when exporting a lot of data.'
		+'</p>',
	},
	{
		text:'<p>'
		+  'First, to give each run an ID, put a new widget on the interface: an input. '
		+  'Associate a new global variable <code class="newvar">run-n</code> with it and choose \'Number\' as its type. '
		+  'When using BehaviorSpace you can use <code class="codeABMA">behaviorspace-run-number</code> for this.'
		+'</p>',
		attachTo:{
			on: 'right',
			element: '.netlogo-display-vertical',
		},
		modalOverlayOpeningPadding:5000,
	},
		{
		text:'<p>'
		+  'Then, create a button calling <code class="buttonName">batch-run</code>, so that we can easily execute the procedure. '
		+  'Put them somewhere on the interface where they are easily reached.'
		+'</p>',
		attachTo:{
			on: 'right',
			element: '.netlogo-display-vertical',
		},
		modalOverlayOpeningPadding:5000,
	},
	{
		text: '<p>'
		+  'Then, inside <code class="codeABMA">measure</code> make two changes:'
		+'</p>'
		+'<ol>'
		+  '<li>At the beginning of the procedure, increase <code class="var">run-n</code> by 1</li>'
		+  '<li>Change the output-print so that <code class="var">run-n</code> is included as the first value (don\'t forget to separate it from the next value with an additional comma!)</li>'
		+'</ol>',
		attachTo:{
			on: 'left',
			element: ()=>{return document.querySelector('#netlogo-code-tab')},
		},
		advanceExampleCode: {
			solution:'to measure\n  set run-n run-n + 1\n  setup\n  repeat 10 [ go ]\n  output-print (word run-n ", " weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)\nend\n',
			codeExample: function() {
				addExampleCode({text:'  set run-n run-n + 1\n', insertAtText:'measure'});
				addExampleCode({text:'  output-print (word run-n ", " weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)', insertAtText:'output-print', position:'at', replace:true});
			},		
			fullCode:`globals [\n  grass\n  earth-patches\n  water-patches\n  littoral-patches\n  mine-patches\n  total-harvest\n  total-amphora\n]\n\nbreed [\n  lineageA lineageAs;; Gaulish agents\n]\n\nbreed [\n  lineageAminers lineageAminer ;; mining families, not used in today's demo\n]\n\nbreed [\n  lineageB1 lineageB1s;; Etruscan Colonist agents\n]\n\nbreed [\n  lineageB2 lineageB2s;; Greek colonist agents\n]\n\nturtles-own [\n  birth-tick\n  a  ;; used to record your x coordinate\n  b  ;; used to record your y coordinate\n  trading-costs\n  thisDistance\n  energy\n  storage\n  GreekWine\n  EtruscanWine\n  metal\n  WinePurchase\n  MetalPurchase\n  GrainPurchase\n  amphoraeAssemblage ;; Etruscan amphorae--default\n  GreekAmphoraeAssemblage ;; Greek amphorae\n  wealth ;; money--trade grain for this\n  trade-partners\n\n]\n\nlineageA-own [\n  myFarm\n]\n\nlineageAminers-own [\n  myMine\n]\n\nlineageB1-own [\n  myVineyard\n]\n\nlineageB2-own [\n  myVineyard\n]\n\npatches-own [\n  owned?\n  countdown\n]\n\n\nto setup\n  ca\n  reset-ticks\n\n  ;; here I'm setting the world. Water isn't necessary, but it's aesthetically pleasing\n  ;; so I'm arbitrarily making the southern quadrant water\n\n  set water-patches patches with [ pycor <= -10 ]\n  ask water-patches [set pcolor blue]\n\n\n  ;;littoral patches are necessary, as it's where wine can be grown. Here I'm making a thin\n  ;; band of coast where Etruscans and Greeks can settle\n\n  set littoral-patches patches with [pycor >= -10 and pycor <= -6 ]\n  ask littoral-patches [set pcolor lime]\n\n  ;;the rest of the landscape is regular 'land', so here I'm coloring these patches. This is\n  ;;where the Gaulish farmers can live.\n\n  set earth-patches patches with [ pycor > -6 ]\n  ask earth-patches [ set pcolor one-of [ green green brown ] ]\n ; ask earth-patches [ ifelse random-float 0.5 [set pcolor green][ set pcolor brown] ]\n  ask earth-patches [ set countdown random grass-regrowth-time ] ;;a slider that says how many ticks a patch will be productive. The lower it is, the more frequently farmed fields decay\n\n  ;; don't worry about metals for today, but there's archaeological evidence that metal was mined\n  ;; and traded for wine.\n\n  if metals? [\n    set mine-patches patches with [ pycor > 24 ]\n    ask mine-patches [\n      ;; I'm sure now that there's a much more elegant way to do this\n      ;; but when I wrote this code my coding skills weren't the *best*\n      ;; so what this does is for every 15 green patches there is 1 grey patch\n\n      set pcolor one-of [green green green green green green green green green green green green green green green grey] ] ]\n\n  create-lineageA number-Gauls\n  [\n    set birth-tick ticks\n    set shape "person"\n    set size 1\n    setxy random-xcor random-ycor\n    ;;set label lineageA\n    set energy 20\n\n    ;;agents consume energy in this model so they need to be instantiated with some amount of energy, so they don't die\n    ;;20 is fairly arbitrary. It depletes quickly, but is essential for model instantiation.\n    ;; importantly, it's below the reproduction threshold, so agents don't show up and have babies right away.\n    ;; they have to farm/trade before they can reproduce.\n\n    set color red\n    move-to one-of earth-patches\n    set owned? true\n    ;;    set trading-costs 1\n  ]\n\n  if metals? [\n    create-lineageAminers number-mining-Gauls [\n      set birth-tick ticks\n      set shape "person"\n      set size 1\n      setxy random-xcor random-ycor\n      set energy 20\n      set color black\n      move-to one-of mine-patches with [ pcolor = grey ]\n    ] ]\n\n\nend\n\nto go\n\n  ;;we don't want the model to keep going if all our agents are dead\n  if not any? turtles [ stop ]\n\n  ;;final timestep basically corresponds to the beginning of the Roman period, but is somewhat arbitrary. Can be changed.\n  if ticks = 500 [ stop ]\n  check-ownership\n\n  ask lineageA [\n    reproduceGauls\n    make-my-farm\n    plant\n    harvest\n    eat-grain\n    store-grain\n    buystuff\n    ;;  more-farms\n    moveCloser\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  ask lineageAminers [\n    eat-grain\n    extractMinerals\n    ;   TradeMetal\n    reproduceMiners\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  if ticks = Etruscan-arrival [\n    create-lineageB1 1 [\n      set birth-tick ticks\n      set shape "plant"\n      set size 1\n      ;;set label lineageA\n      set energy 55\n      set EtruscanWine 20\n      set color blue\n      move-to one-of littoral-patches with [pcolor = lime ]\n      set owned? true\n      landing-Etruscan-colonists\n\n    ]\n  ]\n\n  if two-colonist-populations? [\n    if ticks = Greek-arrival [\n      create-lineageB2 1 [\n        set birth-tick ticks\n        set shape "plant"\n        set size 1\n        ;;set label lineageA\n        set energy 55\n        set GreekWine 20\n        set color orange\n        move-to one-of littoral-patches  with [pcolor = lime ]\n        set owned? true\n        landing-Greek-colonists\n      ] ] ]\n\n\n  ask lineageB1 [\n    TradeWineEtruscans\n    reproduceColonists\n    consumeEtruscanWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineEtruscans\n    death\n  ]\n\n  ask lineageB2 [\n    TradeWineGreeks\n    reproduceColonists\n    consumeGreekWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineGreeks\n    death\n  ]\n\n  ;; we don't want agents to live forever, so here we initiate a death condition (aside from running out of energy).\n  ;; the life-expectancy mark is set on the slider, and defaults to 33--the age I was when I finished my PhD.\n  ;; This, however, may be a little low (even if finishing a PhD feels like death) so it's best to set it around 50.\n  ;; How this works is that when an agent reaches one more than the number of ticks set by the life expectancy slider\n  ;; they choose a random number between 0 and 100, and if the number is less than 50, they die.\n\n  ask turtles [\n    if ticks - birth-tick > life-expectancy [\n      if random-float 100 < 50 [\n        die ]\n    ] ]\n\n\n\n  ;; catch to keep carrying capacity low. The model almost never reaches these issues now, but it's just a catch.\n  ask lineageA [\n    if count lineageA > 1000 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageAminers [\n    if count lineageAminers > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB1 [\n    if count lineageB1 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB2 [\n    if count lineageB2 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask patches [grow-grass]\n  ask patches [patch-degrade]\n\n\n  tick\n\nend\n\nto reproduceGauls  ;; agents procedure\n  if ticks - birth-tick >= 10 [\n    if storage >= 50 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (storage / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n\n      set birth-tick ticks\n\n\n    ] ]\n\n\nend\n\n\n;;if Gaulish agents are spending too much to get wine they adjust their location\nto moveCloser\n  ask lineageA [\n    if pcolor = brown [\n      if trading-costs > 10 [\n        move-to one-of patches with [pycor >= -10 and pycor <= -6  ] ]\n      if trading-costs < 10 [\n        move-to one-of patches with [pcolor = green ] ]\n      set storage storage - 2 ]\n  ]\nend\n\nto regrow\n  ;; a simple way to enable the world to go back to it's basic state. Since we track if the patches are farmed based on color\n  ask patches [ if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ] ]\n  ;;an agent could plant but not harvest, and then die, and if we don't have this catch the patches will be 'unusable' for future agents\n  ;;so in the event an agent dies before harvest (brown) the world can regrow at the end of every tick\n\n  ask patches [ if pcolor = red\n    [set pcolor lime ] ]\n\n  ask patches [ if pcolor = cyan\n    [set pcolor green ]\n  ]\nend\n\nto reproduceMiners  ;; agents procedure\n  if ticks - birth-tick  >= 10 [\n    if energy >= 40 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n      ;;   move-to one-of mine-patches with [not any? turtles-here] ]\n      set birth-tick ticks\n      ;;    move-to one-of mine-patches with [ pcolor = grey ]\n      ;;     if owned? = true [\n      ;;    move-to one-of patches with [owned? = false ] ]\n      ;;    set owned? true\n    ] ]\n\n\nend\n\nto reproduceColonists\n  if ticks - birth-tick  >= 10 [\n    if energy >= 60 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1 [ rt random-float 360 fd 1 ]\n        ;;   move-to one-of littoral-patches with [not any? turtles-here]  ]\n        set birth-tick ticks\n        if pcolor = blue [ move-to one-of littoral-patches with [ pcolor = lime ]\n          ;;   if owned? = true [\n          ;;    move-to one-of littoral-patches with [owned? = false ] ]\n          ;;   set owned? true\n        ] ] ] ]\n\n\nend\n;; I would like to only have 1 turtle per patch! So this makes turtles wander till they find an empty patch.\nto go-until-empty-here  ;; turtle procedure\n  ask turtles [\n    fd 1\n    while [any? other turtles-here]\n      [ fd 1 ]\n  ]\n  tick\nend\n\nto grow-grass  ;; patch procedure\n               ;; countdown on brown patches: if reach 0, grow some grass\n  if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ]\nend\n\nto patch-degrade  ;; patch procedure\n  if pcolor = cyan [\n    ifelse countdown <= 0\n    [  set pcolor brown\n      set countdown 5 ]\n    [  set countdown countdown - 1 ]\n  ]\nend\n\nto extractMinerals\n  if  pcolor = grey [\n    set metal metal + 5\n    set energy energy + 1 ]\n  if  pcolor = green  [\n    set energy energy + 10 ]\nend\n\nto death  ;; turtle procedure\n          ;  when energy dips below zero, die\n  if energy + storage < 0 [ die ]\n\nend\n\n\nto TradeWineEtruscans\n  ;   if random-float 100 < 5 [\n  ask lineageB1 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if EtruscanWine >= 10 [\n          ask one-of lineageA [\n            set a xcor\n            set b ycor\n            if  storage > 60 [\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10    ] ]\n          set thisDistance distancexy a b\n          set energy energy + GrainTradeRate\n          set EtruscanWine EtruscanWine - 10\n          set energy energy -  thisDistance * 0.25 ]\n\n      ]\n    ] ] ;]\n        ;;   if ticks > Greek-arrival]\nend\n\nto TradeWineGreeks\n  ;  if random-float 100 < 5 [\n  ask lineageB2 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if GreekWine >= 10 [\n          ask one-of turtles [\n            set a xcor\n            set b ycor\n            if storage > 60 [\n              if breed != lineageB1 [\n                set energy energy - GrainTradeRate\n                set GreekWine GreekWine + 10  ]\n              set thisDistance distancexy a b\n              set energy energy + GrainTradeRate\n              set GreekWine GreekWine - 10\n              set energy energy -  thisDistance * 0.25\n              set trading-costs thisDistance  ]]\n\n        ]\n      ] ] ] ; ]\nend\n\n\nto buystuff\n\n  ;; this is the way that Gauls initiate trade, and is a central part of this model\n  ;; what this does is when a Gaul has lots of grain they can trade it in for 'wealth' (leaving room for barter for prices later on)\n  ;; Gauls will prefer to trade with those colonists that are within their buying radius, as wine isn't a necessary good\n  ;; When both Etruscans and Greeks are on the landscape, Gauls will draw a random number and compare that number to the weighted trade choice number\n  ;; which weights the preference for different types of wine\n\n  if random-float 100 < 1 [\n    if ticks > Etruscan-arrival [\n      if ticks <= Greek-arrival [\n        if count lineageB1 > 1 [\n          ask lineageA [\n            if storage >= 60 [\n              ask one-of lineageB1  [\n                set a xcor\n                set b ycor\n                if EtruscanWine > 10 [\n                  set energy energy + GrainTradeRate\n                  set EtruscanWine EtruscanWine - 10 ] ]\n              set thisDistance  distancexy a b\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10\n              set storage storage -  thisDistance * 0.5 ]\n          ] ] ]\n\n      if ticks > Greek-arrival [\n        let chance random 100\n        if chance < weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB2 > 1 [\n                ask one-of lineageB2 [\n                  set a xcor\n                  set b ycor\n                  if GreekWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set GreekWine GreekWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set GreekWine GreekWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ] ] ]\n\n        if chance > weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB1 > 1 [\n                ask one-of lineageB1 [\n                  set a xcor\n                  set b ycor\n                  if EtruscanWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set EtruscanWine EtruscanWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set EtruscanWine EtruscanWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ]\n          ]\n        ]\n      ]\n    ]\n  ]\n\nend\n\nto consumeGreekWine\n  if GreekWine > 1 [\n    set GreekWine GreekWine - 1\n  ]\nend\n\n\nto consumeEtruscanWine\n  if EtruscanWine > 1 [\n    set EtruscanWine EtruscanWine - 1\n  ]\nend\n\nto decayMetals\n  if metal > 1 [\n    set metal metal - 1\n  ]\nend\n\n;; each tick Gaulish agents take fallow fields and plant them. They gain a certain amount of energy from fields and can only extract\n;; more energy if they plant more\nto make-my-farm\n  if pcolor != brown [\n    set pcolor cyan ;;\n  ]\nend\n\nto plant\n  ;;ethnographically, people use beer parties to help with planting costs, so here wine makes planting easier!\n  if pcolor != brown [\n    set pcolor cyan ;; this way we can differentiate between unfarmed patches, dead patches, and farmed patches\n    set energy energy - planting-calories  ;; agents expend energy by planting\n    if (EtruscanWine > 1) or (GreekWine > 1)\n    [ set energy energy + 1 ]\n    death\n  ]\nend\n\nto harvest\n  if pcolor = cyan [ ;;again, only those patches with the pcolor cyan can be harvested as a field\n    set energy energy + harvest-amount   ;; harvest amount is how much agents get from each farm patch\n    set energy energy - harvest-calories  ;; it costs calories to harvest grain\n    set total-harvest total-harvest + harvest-amount\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    death\n  ]\nend\n\nto eat-grain\n  set energy energy - 1 ;; agents basic metabolic needs, they need to eat 1 each year to survive\nend\n\nto  store-grain\n  set storage storage + energy\n  set energy energy - energy\n  death\n\nend\n\n;; what I need to do: agents look at how much they're charged for planting, keep that in their regular storage, then make an outside storage\n;; any extra grain they have can go in those coffers\n;; so I need to transfer immediate energy to stored energy\n;; and they only reproduce when their *stored* energy is high\n\nto check-ownership\n  ask patches [\n    if count turtles-here > 0\n    [ set owned? true ] ]\nend\n\nto landing-Greek-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set GreekWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto landing-Etruscan-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set EtruscanWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto plantVineyard\n  if pcolor != blue [\n    set pcolor red\n    set energy energy - planting-calories ;; agents are charged the same to plant wine as they are to plant grain\n    death ]\nend\n\nto harvestWineEtruscans\n  if pcolor = red [\n    set pcolor lime\n    set EtruscanWine EtruscanWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto harvestWineGreeks\n  if pcolor = red [\n    set pcolor lime\n    set GreekWine GreekWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto more-farms\n  death\n\nend\n\nto-report Etruscan-wine-wealth\n  report [EtruscanWine] of turtles\nend\n\nto measure\n  setup\n  repeat 10 [ go ]\n  output-print (word weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)\nend\n\nto export-turtles\n  output-print (word "turtle, breed, x, y, energy")\n  ask turtles [\n    output-print (word who ", " breed ", " xcor ", " ycor ", " energy)\n  ]\n  export-output "AmphorABM_turtles.csv"\nend\n\nto batch-run\n  set weighted-trade-choice 0\n  while [weighted-trade-choice <= 100] [\n    set metals? true\n    measure\n    set metals? false\n    measure\n    set weighted-trade-choice weighted-trade-choice + 25\n  ]\n  clear-all\nend\n`,
		},
		complexAdvanceOn: function() {
			advanceOnRecompile();
		},
	},
	{
		text:'<p>'
		+  'Last, make three changes to <code class="codeABMA">batch-run</code>:'
		+'</p>'
		+'<ol>'
		+  '<li> At the beginning of the procedure, add a line of code setting run-n to 0</li>'
		+  '<li> Right below it, we will add a header to the text by printing a line giving each value a name, like so: <code class="codeABMA">(word "run, weighted-trade-choice, metals, count turtles, count lineageA, count lineageB1, count lineageB2, total-amphora")</code></li>'
		+  '<li>At the end of the procedure add a line exporting the console output, like so <code class="codeABMA">export-output "AmphorABM_output.csv"</code></li>'
		+'</ol>'
		+'<p>'
		+  'and recompile.'
		+'</p>'
		+createMoreInfoBox({content:'<p>'
		+  '<b>Procedure: </b>The reason we are using an input for <code class="run">run-n</code> even though we are setting it to 0 here is that an interface element '
		+  'will retain its values even when <code class="codeABMA">clear-all</code> is used like in the <code class="codeABMA">setup</code> procedure. '
		+'</p>'}),
		attachTo:{
			on: 'left',
			element: ()=>{return document.querySelector('#netlogo-code-tab')},
		},
		advanceExampleCode: {
			solution:'\nto batch-run\n  set run-n 0\n  output-print (word "run, weighted-trade-choice, metals, count turtles, count lineageA, count lineageB1, count lineageB2, total-amphora")\n  set weighted-trade-choice 0\n  while [weighted-trade-choice <= 100] [\n    set metals? true\n    measure\n    set metals? false\n    measure\n    set weighted-trade-choice weighted-trade-choice + 25\n  ]\n  clear-all\n  export-output "AmphorABM_output.csv"\nend\n',
			codeExample: function() {
				addExampleCode({text:'  set run-n 0\n', insertAtText:'batch-run'});
				addExampleCode({text:'  output-print (word "run, weighted-trade-choice, metals, count turtles, count lineageA, count lineageB1, count lineageB2, total-amphora")\n', insertAtText:'set run-n 0'});
				addExampleCode({text:'  export-output "AmphorABM_output.csv"\n', insertAtText:'end', position:'at', instance:36});
			},	
			fullCode:`globals [\n  grass\n  earth-patches\n  water-patches\n  littoral-patches\n  mine-patches\n  total-harvest\n  total-amphora\n]\n\nbreed [\n  lineageA lineageAs;; Gaulish agents\n]\n\nbreed [\n  lineageAminers lineageAminer ;; mining families, not used in today's demo\n]\n\nbreed [\n  lineageB1 lineageB1s;; Etruscan Colonist agents\n]\n\nbreed [\n  lineageB2 lineageB2s;; Greek colonist agents\n]\n\nturtles-own [\n  birth-tick\n  a  ;; used to record your x coordinate\n  b  ;; used to record your y coordinate\n  trading-costs\n  thisDistance\n  energy\n  storage\n  GreekWine\n  EtruscanWine\n  metal\n  WinePurchase\n  MetalPurchase\n  GrainPurchase\n  amphoraeAssemblage ;; Etruscan amphorae--default\n  GreekAmphoraeAssemblage ;; Greek amphorae\n  wealth ;; money--trade grain for this\n  trade-partners\n\n]\n\nlineageA-own [\n  myFarm\n]\n\nlineageAminers-own [\n  myMine\n]\n\nlineageB1-own [\n  myVineyard\n]\n\nlineageB2-own [\n  myVineyard\n]\n\npatches-own [\n  owned?\n  countdown\n]\n\n\nto setup\n  ca\n  reset-ticks\n\n  ;; here I'm setting the world. Water isn't necessary, but it's aesthetically pleasing\n  ;; so I'm arbitrarily making the southern quadrant water\n\n  set water-patches patches with [ pycor <= -10 ]\n  ask water-patches [set pcolor blue]\n\n\n  ;;littoral patches are necessary, as it's where wine can be grown. Here I'm making a thin\n  ;; band of coast where Etruscans and Greeks can settle\n\n  set littoral-patches patches with [pycor >= -10 and pycor <= -6 ]\n  ask littoral-patches [set pcolor lime]\n\n  ;;the rest of the landscape is regular 'land', so here I'm coloring these patches. This is\n  ;;where the Gaulish farmers can live.\n\n  set earth-patches patches with [ pycor > -6 ]\n  ask earth-patches [ set pcolor one-of [ green green brown ] ]\n ; ask earth-patches [ ifelse random-float 0.5 [set pcolor green][ set pcolor brown] ]\n  ask earth-patches [ set countdown random grass-regrowth-time ] ;;a slider that says how many ticks a patch will be productive. The lower it is, the more frequently farmed fields decay\n\n  ;; don't worry about metals for today, but there's archaeological evidence that metal was mined\n  ;; and traded for wine.\n\n  if metals? [\n    set mine-patches patches with [ pycor > 24 ]\n    ask mine-patches [\n      ;; I'm sure now that there's a much more elegant way to do this\n      ;; but when I wrote this code my coding skills weren't the *best*\n      ;; so what this does is for every 15 green patches there is 1 grey patch\n\n      set pcolor one-of [green green green green green green green green green green green green green green green grey] ] ]\n\n  create-lineageA number-Gauls\n  [\n    set birth-tick ticks\n    set shape "person"\n    set size 1\n    setxy random-xcor random-ycor\n    ;;set label lineageA\n    set energy 20\n\n    ;;agents consume energy in this model so they need to be instantiated with some amount of energy, so they don't die\n    ;;20 is fairly arbitrary. It depletes quickly, but is essential for model instantiation.\n    ;; importantly, it's below the reproduction threshold, so agents don't show up and have babies right away.\n    ;; they have to farm/trade before they can reproduce.\n\n    set color red\n    move-to one-of earth-patches\n    set owned? true\n    ;;    set trading-costs 1\n  ]\n\n  if metals? [\n    create-lineageAminers number-mining-Gauls [\n      set birth-tick ticks\n      set shape "person"\n      set size 1\n      setxy random-xcor random-ycor\n      set energy 20\n      set color black\n      move-to one-of mine-patches with [ pcolor = grey ]\n    ] ]\n\n\nend\n\nto go\n\n  ;;we don't want the model to keep going if all our agents are dead\n  if not any? turtles [ stop ]\n\n  ;;final timestep basically corresponds to the beginning of the Roman period, but is somewhat arbitrary. Can be changed.\n  if ticks = 500 [ stop ]\n  check-ownership\n\n  ask lineageA [\n    reproduceGauls\n    make-my-farm\n    plant\n    harvest\n    eat-grain\n    store-grain\n    buystuff\n    ;;  more-farms\n    moveCloser\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  ask lineageAminers [\n    eat-grain\n    extractMinerals\n    ;   TradeMetal\n    reproduceMiners\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  if ticks = Etruscan-arrival [\n    create-lineageB1 1 [\n      set birth-tick ticks\n      set shape "plant"\n      set size 1\n      ;;set label lineageA\n      set energy 55\n      set EtruscanWine 20\n      set color blue\n      move-to one-of littoral-patches with [pcolor = lime ]\n      set owned? true\n      landing-Etruscan-colonists\n\n    ]\n  ]\n\n  if two-colonist-populations? [\n    if ticks = Greek-arrival [\n      create-lineageB2 1 [\n        set birth-tick ticks\n        set shape "plant"\n        set size 1\n        ;;set label lineageA\n        set energy 55\n        set GreekWine 20\n        set color orange\n        move-to one-of littoral-patches  with [pcolor = lime ]\n        set owned? true\n        landing-Greek-colonists\n      ] ] ]\n\n\n  ask lineageB1 [\n    TradeWineEtruscans\n    reproduceColonists\n    consumeEtruscanWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineEtruscans\n    death\n  ]\n\n  ask lineageB2 [\n    TradeWineGreeks\n    reproduceColonists\n    consumeGreekWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineGreeks\n    death\n  ]\n\n  ;; we don't want agents to live forever, so here we initiate a death condition (aside from running out of energy).\n  ;; the life-expectancy mark is set on the slider, and defaults to 33--the age I was when I finished my PhD.\n  ;; This, however, may be a little low (even if finishing a PhD feels like death) so it's best to set it around 50.\n  ;; How this works is that when an agent reaches one more than the number of ticks set by the life expectancy slider\n  ;; they choose a random number between 0 and 100, and if the number is less than 50, they die.\n\n  ask turtles [\n    if ticks - birth-tick > life-expectancy [\n      if random-float 100 < 50 [\n        die ]\n    ] ]\n\n\n\n  ;; catch to keep carrying capacity low. The model almost never reaches these issues now, but it's just a catch.\n  ask lineageA [\n    if count lineageA > 1000 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageAminers [\n    if count lineageAminers > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB1 [\n    if count lineageB1 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB2 [\n    if count lineageB2 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask patches [grow-grass]\n  ask patches [patch-degrade]\n\n\n  tick\n\nend\n\nto reproduceGauls  ;; agents procedure\n  if ticks - birth-tick >= 10 [\n    if storage >= 50 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (storage / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n\n      set birth-tick ticks\n\n\n    ] ]\n\n\nend\n\n\n;;if Gaulish agents are spending too much to get wine they adjust their location\nto moveCloser\n  ask lineageA [\n    if pcolor = brown [\n      if trading-costs > 10 [\n        move-to one-of patches with [pycor >= -10 and pycor <= -6  ] ]\n      if trading-costs < 10 [\n        move-to one-of patches with [pcolor = green ] ]\n      set storage storage - 2 ]\n  ]\nend\n\nto regrow\n  ;; a simple way to enable the world to go back to it's basic state. Since we track if the patches are farmed based on color\n  ask patches [ if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ] ]\n  ;;an agent could plant but not harvest, and then die, and if we don't have this catch the patches will be 'unusable' for future agents\n  ;;so in the event an agent dies before harvest (brown) the world can regrow at the end of every tick\n\n  ask patches [ if pcolor = red\n    [set pcolor lime ] ]\n\n  ask patches [ if pcolor = cyan\n    [set pcolor green ]\n  ]\nend\n\nto reproduceMiners  ;; agents procedure\n  if ticks - birth-tick  >= 10 [\n    if energy >= 40 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n      ;;   move-to one-of mine-patches with [not any? turtles-here] ]\n      set birth-tick ticks\n      ;;    move-to one-of mine-patches with [ pcolor = grey ]\n      ;;     if owned? = true [\n      ;;    move-to one-of patches with [owned? = false ] ]\n      ;;    set owned? true\n    ] ]\n\n\nend\n\nto reproduceColonists\n  if ticks - birth-tick  >= 10 [\n    if energy >= 60 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1 [ rt random-float 360 fd 1 ]\n        ;;   move-to one-of littoral-patches with [not any? turtles-here]  ]\n        set birth-tick ticks\n        if pcolor = blue [ move-to one-of littoral-patches with [ pcolor = lime ]\n          ;;   if owned? = true [\n          ;;    move-to one-of littoral-patches with [owned? = false ] ]\n          ;;   set owned? true\n        ] ] ] ]\n\n\nend\n;; I would like to only have 1 turtle per patch! So this makes turtles wander till they find an empty patch.\nto go-until-empty-here  ;; turtle procedure\n  ask turtles [\n    fd 1\n    while [any? other turtles-here]\n      [ fd 1 ]\n  ]\n  tick\nend\n\nto grow-grass  ;; patch procedure\n               ;; countdown on brown patches: if reach 0, grow some grass\n  if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ]\nend\n\nto patch-degrade  ;; patch procedure\n  if pcolor = cyan [\n    ifelse countdown <= 0\n    [  set pcolor brown\n      set countdown 5 ]\n    [  set countdown countdown - 1 ]\n  ]\nend\n\nto extractMinerals\n  if  pcolor = grey [\n    set metal metal + 5\n    set energy energy + 1 ]\n  if  pcolor = green  [\n    set energy energy + 10 ]\nend\n\nto death  ;; turtle procedure\n          ;  when energy dips below zero, die\n  if energy + storage < 0 [ die ]\n\nend\n\n\nto TradeWineEtruscans\n  ;   if random-float 100 < 5 [\n  ask lineageB1 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if EtruscanWine >= 10 [\n          ask one-of lineageA [\n            set a xcor\n            set b ycor\n            if  storage > 60 [\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10    ] ]\n          set thisDistance distancexy a b\n          set energy energy + GrainTradeRate\n          set EtruscanWine EtruscanWine - 10\n          set energy energy -  thisDistance * 0.25 ]\n\n      ]\n    ] ] ;]\n        ;;   if ticks > Greek-arrival]\nend\n\nto TradeWineGreeks\n  ;  if random-float 100 < 5 [\n  ask lineageB2 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if GreekWine >= 10 [\n          ask one-of turtles [\n            set a xcor\n            set b ycor\n            if storage > 60 [\n              if breed != lineageB1 [\n                set energy energy - GrainTradeRate\n                set GreekWine GreekWine + 10  ]\n              set thisDistance distancexy a b\n              set energy energy + GrainTradeRate\n              set GreekWine GreekWine - 10\n              set energy energy -  thisDistance * 0.25\n              set trading-costs thisDistance  ]]\n\n        ]\n      ] ] ] ; ]\nend\n\n\nto buystuff\n\n  ;; this is the way that Gauls initiate trade, and is a central part of this model\n  ;; what this does is when a Gaul has lots of grain they can trade it in for 'wealth' (leaving room for barter for prices later on)\n  ;; Gauls will prefer to trade with those colonists that are within their buying radius, as wine isn't a necessary good\n  ;; When both Etruscans and Greeks are on the landscape, Gauls will draw a random number and compare that number to the weighted trade choice number\n  ;; which weights the preference for different types of wine\n\n  if random-float 100 < 1 [\n    if ticks > Etruscan-arrival [\n      if ticks <= Greek-arrival [\n        if count lineageB1 > 1 [\n          ask lineageA [\n            if storage >= 60 [\n              ask one-of lineageB1  [\n                set a xcor\n                set b ycor\n                if EtruscanWine > 10 [\n                  set energy energy + GrainTradeRate\n                  set EtruscanWine EtruscanWine - 10 ] ]\n              set thisDistance  distancexy a b\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10\n              set storage storage -  thisDistance * 0.5 ]\n          ] ] ]\n\n      if ticks > Greek-arrival [\n        let chance random 100\n        if chance < weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB2 > 1 [\n                ask one-of lineageB2 [\n                  set a xcor\n                  set b ycor\n                  if GreekWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set GreekWine GreekWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set GreekWine GreekWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ] ] ]\n\n        if chance > weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB1 > 1 [\n                ask one-of lineageB1 [\n                  set a xcor\n                  set b ycor\n                  if EtruscanWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set EtruscanWine EtruscanWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set EtruscanWine EtruscanWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ]\n          ]\n        ]\n      ]\n    ]\n  ]\n\nend\n\nto consumeGreekWine\n  if GreekWine > 1 [\n    set GreekWine GreekWine - 1\n  ]\nend\n\n\nto consumeEtruscanWine\n  if EtruscanWine > 1 [\n    set EtruscanWine EtruscanWine - 1\n  ]\nend\n\nto decayMetals\n  if metal > 1 [\n    set metal metal - 1\n  ]\nend\n\n;; each tick Gaulish agents take fallow fields and plant them. They gain a certain amount of energy from fields and can only extract\n;; more energy if they plant more\nto make-my-farm\n  if pcolor != brown [\n    set pcolor cyan ;;\n  ]\nend\n\nto plant\n  ;;ethnographically, people use beer parties to help with planting costs, so here wine makes planting easier!\n  if pcolor != brown [\n    set pcolor cyan ;; this way we can differentiate between unfarmed patches, dead patches, and farmed patches\n    set energy energy - planting-calories  ;; agents expend energy by planting\n    if (EtruscanWine > 1) or (GreekWine > 1)\n    [ set energy energy + 1 ]\n    death\n  ]\nend\n\nto harvest\n  if pcolor = cyan [ ;;again, only those patches with the pcolor cyan can be harvested as a field\n    set energy energy + harvest-amount   ;; harvest amount is how much agents get from each farm patch\n    set energy energy - harvest-calories  ;; it costs calories to harvest grain\n    set total-harvest total-harvest + harvest-amount\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    death\n  ]\nend\n\nto eat-grain\n  set energy energy - 1 ;; agents basic metabolic needs, they need to eat 1 each year to survive\nend\n\nto  store-grain\n  set storage storage + energy\n  set energy energy - energy\n  death\n\nend\n\n;; what I need to do: agents look at how much they're charged for planting, keep that in their regular storage, then make an outside storage\n;; any extra grain they have can go in those coffers\n;; so I need to transfer immediate energy to stored energy\n;; and they only reproduce when their *stored* energy is high\n\nto check-ownership\n  ask patches [\n    if count turtles-here > 0\n    [ set owned? true ] ]\nend\n\nto landing-Greek-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set GreekWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto landing-Etruscan-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set EtruscanWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto plantVineyard\n  if pcolor != blue [\n    set pcolor red\n    set energy energy - planting-calories ;; agents are charged the same to plant wine as they are to plant grain\n    death ]\nend\n\nto harvestWineEtruscans\n  if pcolor = red [\n    set pcolor lime\n    set EtruscanWine EtruscanWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto harvestWineGreeks\n  if pcolor = red [\n    set pcolor lime\n    set GreekWine GreekWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto more-farms\n  death\n\nend\n\nto-report Etruscan-wine-wealth\n  report [EtruscanWine] of turtles\nend\n\nto measure\n  set run-n run-n + 1\n  setup\n  repeat 10 [ go ]\n  output-print (word run-n ", " weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)\nend\n\nto export-turtles\n  output-print (word "turtle, breed, x, y, energy")\n  ask turtles [\n    output-print (word who ", " breed ", " xcor ", " ycor ", " energy)\n  ]\n  export-output "AmphorABM_turtles.csv"\nend\n\nto batch-run\n  set weighted-trade-choice 0\n  while [weighted-trade-choice <= 100] [\n    set metals? true\n    measure\n    set metals? false\n    measure\n    set weighted-trade-choice weighted-trade-choice + 25\n  ]\n  clear-all\nend\n`,
		},
		complexAdvanceOn: function() {
			advanceOnRecompile();
		},
	},
	{
		text:'<p>'
		+  'Before we change <code class="codeABMA">measure</code> to run the model for 500 ticks, let\'s test that everything works as intended.'
		+'</p>'
		+'<p>'
		+  'First, clear the command center to create a blank slate. Then, press the new <code class="buttonName">batch-run</code> button.'
		+'</p>',
		attachTo:{
			on: 'right',
			element: '.netlogo-display-horizontal',
		},
	},
	{
		text:'<p>'
		+  'A new CSV should have been downloaded. If you open it up in a spreadsheet program, it should look something like this:'
		+'</p>'
		+'<table>'
		+'    <tr>'
		+'        <td>run</td>'
		+'        <td> weighted-trade-choice</td>'
		+'        <td> metals</td>'
		+'        <td> count turtles</td>'
		+'        <td> count lineageA</td>'
		+'        <td> count lineageB1</td>'
		+'        <td> count lineageB2</td>'
		+'        <td> total-amphora</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>1</td>'
		+'        <td>0</td>'
		+'        <td> true</td>'
		+'        <td>169</td>'
		+'        <td>150</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>2</td>'
		+'        <td>0</td>'
		+'        <td> false</td>'
		+'        <td>150</td>'
		+'        <td>150</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>3</td>'
		+'        <td>25</td>'
		+'        <td> true</td>'
		+'        <td>169</td>'
		+'        <td>150</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>4</td>'
		+'        <td>25</td>'
		+'        <td> false</td>'
		+'        <td>150</td>'
		+'        <td>150</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>5</td>'
		+'        <td>50</td>'
		+'        <td> true</td>'
		+'        <td>169</td>'
		+'        <td>150</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>6</td>'
		+'        <td>50</td>'
		+'        <td> false</td>'
		+'        <td>150</td>'
		+'        <td>150</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>7</td>'
		+'        <td>75</td>'
		+'        <td> true</td>'
		+'        <td>169</td>'
		+'        <td>150</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>8</td>'
		+'        <td>75</td>'
		+'        <td> false</td>'
		+'        <td>150</td>'
		+'        <td>150</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'        <td>0</td>'
		+'    </tr>'
		+'    <tr>'
		+'        <td>...</td>'
		+'        <td>...</td>'
		+'        <td>...</td>'
		+'        <td>...</td>'
		+'        <td>...</td>'
		+'        <td>...</td>'
		+'        <td>...</td>'
		+'        <td>...</td>'
		+'    </tr>'
		+'</table>'
		+'<p>'
		+  'Obviously, the results are not that interesting because we are only running the model for 10 ticks to test it out.'
		+'</p>'
	},
	{
		text:'<p>'
		+  'As mentioned before, this model is usually run for 500 ticks. Now that everything works correctly, change the <code class="codeABMA">measure</code> procedure so that '
		+  '<code class="codeABMA">go</code> is repeated 500 instead of 10 times.'
		+'</p>',
		attachTo:{
			on: 'left',
			element: ()=>{return document.querySelector('#netlogo-code-tab')},
		},
		advanceExampleCode: {
			solution:'to measure\n  set run-n run-n + 1\n  setup\n  repeat 500 [ go ] \n  output-print (word run-n ", " weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)\nend\n',
			codeExample: function() {
				addExampleCode({text:'  repeat 500 [ go ] ', insertAtText:'repeat 10', position:'at', replace:true});
			},	
			fullCode:`globals [\n  grass\n  earth-patches\n  water-patches\n  littoral-patches\n  mine-patches\n  total-harvest\n  total-amphora\n]\n\nbreed [\n  lineageA lineageAs;; Gaulish agents\n]\n\nbreed [\n  lineageAminers lineageAminer ;; mining families, not used in today's demo\n]\n\nbreed [\n  lineageB1 lineageB1s;; Etruscan Colonist agents\n]\n\nbreed [\n  lineageB2 lineageB2s;; Greek colonist agents\n]\n\nturtles-own [\n  birth-tick\n  a  ;; used to record your x coordinate\n  b  ;; used to record your y coordinate\n  trading-costs\n  thisDistance\n  energy\n  storage\n  GreekWine\n  EtruscanWine\n  metal\n  WinePurchase\n  MetalPurchase\n  GrainPurchase\n  amphoraeAssemblage ;; Etruscan amphorae--default\n  GreekAmphoraeAssemblage ;; Greek amphorae\n  wealth ;; money--trade grain for this\n  trade-partners\n\n]\n\nlineageA-own [\n  myFarm\n]\n\nlineageAminers-own [\n  myMine\n]\n\nlineageB1-own [\n  myVineyard\n]\n\nlineageB2-own [\n  myVineyard\n]\n\npatches-own [\n  owned?\n  countdown\n]\n\n\nto setup\n  ca\n  reset-ticks\n\n  ;; here I'm setting the world. Water isn't necessary, but it's aesthetically pleasing\n  ;; so I'm arbitrarily making the southern quadrant water\n\n  set water-patches patches with [ pycor <= -10 ]\n  ask water-patches [set pcolor blue]\n\n\n  ;;littoral patches are necessary, as it's where wine can be grown. Here I'm making a thin\n  ;; band of coast where Etruscans and Greeks can settle\n\n  set littoral-patches patches with [pycor >= -10 and pycor <= -6 ]\n  ask littoral-patches [set pcolor lime]\n\n  ;;the rest of the landscape is regular 'land', so here I'm coloring these patches. This is\n  ;;where the Gaulish farmers can live.\n\n  set earth-patches patches with [ pycor > -6 ]\n  ask earth-patches [ set pcolor one-of [ green green brown ] ]\n ; ask earth-patches [ ifelse random-float 0.5 [set pcolor green][ set pcolor brown] ]\n  ask earth-patches [ set countdown random grass-regrowth-time ] ;;a slider that says how many ticks a patch will be productive. The lower it is, the more frequently farmed fields decay\n\n  ;; don't worry about metals for today, but there's archaeological evidence that metal was mined\n  ;; and traded for wine.\n\n  if metals? [\n    set mine-patches patches with [ pycor > 24 ]\n    ask mine-patches [\n      ;; I'm sure now that there's a much more elegant way to do this\n      ;; but when I wrote this code my coding skills weren't the *best*\n      ;; so what this does is for every 15 green patches there is 1 grey patch\n\n      set pcolor one-of [green green green green green green green green green green green green green green green grey] ] ]\n\n  create-lineageA number-Gauls\n  [\n    set birth-tick ticks\n    set shape "person"\n    set size 1\n    setxy random-xcor random-ycor\n    ;;set label lineageA\n    set energy 20\n\n    ;;agents consume energy in this model so they need to be instantiated with some amount of energy, so they don't die\n    ;;20 is fairly arbitrary. It depletes quickly, but is essential for model instantiation.\n    ;; importantly, it's below the reproduction threshold, so agents don't show up and have babies right away.\n    ;; they have to farm/trade before they can reproduce.\n\n    set color red\n    move-to one-of earth-patches\n    set owned? true\n    ;;    set trading-costs 1\n  ]\n\n  if metals? [\n    create-lineageAminers number-mining-Gauls [\n      set birth-tick ticks\n      set shape "person"\n      set size 1\n      setxy random-xcor random-ycor\n      set energy 20\n      set color black\n      move-to one-of mine-patches with [ pcolor = grey ]\n    ] ]\n\n\nend\n\nto go\n\n  ;;we don't want the model to keep going if all our agents are dead\n  if not any? turtles [ stop ]\n\n  ;;final timestep basically corresponds to the beginning of the Roman period, but is somewhat arbitrary. Can be changed.\n  if ticks = 500 [ stop ]\n  check-ownership\n\n  ask lineageA [\n    reproduceGauls\n    make-my-farm\n    plant\n    harvest\n    eat-grain\n    store-grain\n    buystuff\n    ;;  more-farms\n    moveCloser\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  ask lineageAminers [\n    eat-grain\n    extractMinerals\n    ;   TradeMetal\n    reproduceMiners\n    consumeGreekWine\n    consumeEtruscanWine\n    decayMetals\n    death\n  ]\n\n  if ticks = Etruscan-arrival [\n    create-lineageB1 1 [\n      set birth-tick ticks\n      set shape "plant"\n      set size 1\n      ;;set label lineageA\n      set energy 55\n      set EtruscanWine 20\n      set color blue\n      move-to one-of littoral-patches with [pcolor = lime ]\n      set owned? true\n      landing-Etruscan-colonists\n\n    ]\n  ]\n\n  if two-colonist-populations? [\n    if ticks = Greek-arrival [\n      create-lineageB2 1 [\n        set birth-tick ticks\n        set shape "plant"\n        set size 1\n        ;;set label lineageA\n        set energy 55\n        set GreekWine 20\n        set color orange\n        move-to one-of littoral-patches  with [pcolor = lime ]\n        set owned? true\n        landing-Greek-colonists\n      ] ] ]\n\n\n  ask lineageB1 [\n    TradeWineEtruscans\n    reproduceColonists\n    consumeEtruscanWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineEtruscans\n    death\n  ]\n\n  ask lineageB2 [\n    TradeWineGreeks\n    reproduceColonists\n    consumeGreekWine\n    decayMetals\n    eat-grain\n    plantVineyard\n    harvestWineGreeks\n    death\n  ]\n\n  ;; we don't want agents to live forever, so here we initiate a death condition (aside from running out of energy).\n  ;; the life-expectancy mark is set on the slider, and defaults to 33--the age I was when I finished my PhD.\n  ;; This, however, may be a little low (even if finishing a PhD feels like death) so it's best to set it around 50.\n  ;; How this works is that when an agent reaches one more than the number of ticks set by the life expectancy slider\n  ;; they choose a random number between 0 and 100, and if the number is less than 50, they die.\n\n  ask turtles [\n    if ticks - birth-tick > life-expectancy [\n      if random-float 100 < 50 [\n        die ]\n    ] ]\n\n\n\n  ;; catch to keep carrying capacity low. The model almost never reaches these issues now, but it's just a catch.\n  ask lineageA [\n    if count lineageA > 1000 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageAminers [\n    if count lineageAminers > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB1 [\n    if count lineageB1 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask lineageB2 [\n    if count lineageB2 > 600 [\n      if birth-tick > life-expectancy [die]\n    ]\n  ]\n\n  ask patches [grow-grass]\n  ask patches [patch-degrade]\n\n\n  tick\n\nend\n\nto reproduceGauls  ;; agents procedure\n  if ticks - birth-tick >= 10 [\n    if storage >= 50 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (storage / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n\n      set birth-tick ticks\n\n\n    ] ]\n\n\nend\n\n\n;;if Gaulish agents are spending too much to get wine they adjust their location\nto moveCloser\n  ask lineageA [\n    if pcolor = brown [\n      if trading-costs > 10 [\n        move-to one-of patches with [pycor >= -10 and pycor <= -6  ] ]\n      if trading-costs < 10 [\n        move-to one-of patches with [pcolor = green ] ]\n      set storage storage - 2 ]\n  ]\nend\n\nto regrow\n  ;; a simple way to enable the world to go back to it's basic state. Since we track if the patches are farmed based on color\n  ask patches [ if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ] ]\n  ;;an agent could plant but not harvest, and then die, and if we don't have this catch the patches will be 'unusable' for future agents\n  ;;so in the event an agent dies before harvest (brown) the world can regrow at the end of every tick\n\n  ask patches [ if pcolor = red\n    [set pcolor lime ] ]\n\n  ask patches [ if pcolor = cyan\n    [set pcolor green ]\n  ]\nend\n\nto reproduceMiners  ;; agents procedure\n  if ticks - birth-tick  >= 10 [\n    if energy >= 40 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1  [ rt random-float 360 fd 1 ] ]\n      ;;   move-to one-of mine-patches with [not any? turtles-here] ]\n      set birth-tick ticks\n      ;;    move-to one-of mine-patches with [ pcolor = grey ]\n      ;;     if owned? = true [\n      ;;    move-to one-of patches with [owned? = false ] ]\n      ;;    set owned? true\n    ] ]\n\n\nend\n\nto reproduceColonists\n  if ticks - birth-tick  >= 10 [\n    if energy >= 60 [\n      if random-float 100 < reproduction [  ;; throw "dice" to see if you will reproduce\n        set energy (energy / 2)   ;; divide energy between parent and offspring\n        hatch 1 [ rt random-float 360 fd 1 ]\n        ;;   move-to one-of littoral-patches with [not any? turtles-here]  ]\n        set birth-tick ticks\n        if pcolor = blue [ move-to one-of littoral-patches with [ pcolor = lime ]\n          ;;   if owned? = true [\n          ;;    move-to one-of littoral-patches with [owned? = false ] ]\n          ;;   set owned? true\n        ] ] ] ]\n\n\nend\n;; I would like to only have 1 turtle per patch! So this makes turtles wander till they find an empty patch.\nto go-until-empty-here  ;; turtle procedure\n  ask turtles [\n    fd 1\n    while [any? other turtles-here]\n      [ fd 1 ]\n  ]\n  tick\nend\n\nto grow-grass  ;; patch procedure\n               ;; countdown on brown patches: if reach 0, grow some grass\n  if pcolor = brown [\n    ifelse countdown <= 0\n      [ set pcolor green\n        set countdown grass-regrowth-time ]\n      [ set countdown countdown - 1 ]\n  ]\nend\n\nto patch-degrade  ;; patch procedure\n  if pcolor = cyan [\n    ifelse countdown <= 0\n    [  set pcolor brown\n      set countdown 5 ]\n    [  set countdown countdown - 1 ]\n  ]\nend\n\nto extractMinerals\n  if  pcolor = grey [\n    set metal metal + 5\n    set energy energy + 1 ]\n  if  pcolor = green  [\n    set energy energy + 10 ]\nend\n\nto death  ;; turtle procedure\n          ;  when energy dips below zero, die\n  if energy + storage < 0 [ die ]\n\nend\n\n\nto TradeWineEtruscans\n  ;   if random-float 100 < 5 [\n  ask lineageB1 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if EtruscanWine >= 10 [\n          ask one-of lineageA [\n            set a xcor\n            set b ycor\n            if  storage > 60 [\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10    ] ]\n          set thisDistance distancexy a b\n          set energy energy + GrainTradeRate\n          set EtruscanWine EtruscanWine - 10\n          set energy energy -  thisDistance * 0.25 ]\n\n      ]\n    ] ] ;]\n        ;;   if ticks > Greek-arrival]\nend\n\nto TradeWineGreeks\n  ;  if random-float 100 < 5 [\n  ask lineageB2 [\n    if energy < 20 [\n      if random-float 100 < 25 [\n        if GreekWine >= 10 [\n          ask one-of turtles [\n            set a xcor\n            set b ycor\n            if storage > 60 [\n              if breed != lineageB1 [\n                set energy energy - GrainTradeRate\n                set GreekWine GreekWine + 10  ]\n              set thisDistance distancexy a b\n              set energy energy + GrainTradeRate\n              set GreekWine GreekWine - 10\n              set energy energy -  thisDistance * 0.25\n              set trading-costs thisDistance  ]]\n\n        ]\n      ] ] ] ; ]\nend\n\n\nto buystuff\n\n  ;; this is the way that Gauls initiate trade, and is a central part of this model\n  ;; what this does is when a Gaul has lots of grain they can trade it in for 'wealth' (leaving room for barter for prices later on)\n  ;; Gauls will prefer to trade with those colonists that are within their buying radius, as wine isn't a necessary good\n  ;; When both Etruscans and Greeks are on the landscape, Gauls will draw a random number and compare that number to the weighted trade choice number\n  ;; which weights the preference for different types of wine\n\n  if random-float 100 < 1 [\n    if ticks > Etruscan-arrival [\n      if ticks <= Greek-arrival [\n        if count lineageB1 > 1 [\n          ask lineageA [\n            if storage >= 60 [\n              ask one-of lineageB1  [\n                set a xcor\n                set b ycor\n                if EtruscanWine > 10 [\n                  set energy energy + GrainTradeRate\n                  set EtruscanWine EtruscanWine - 10 ] ]\n              set thisDistance  distancexy a b\n              set storage storage - GrainTradeRate\n              set EtruscanWine EtruscanWine + 10\n              set storage storage -  thisDistance * 0.5 ]\n          ] ] ]\n\n      if ticks > Greek-arrival [\n        let chance random 100\n        if chance < weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB2 > 1 [\n                ask one-of lineageB2 [\n                  set a xcor\n                  set b ycor\n                  if GreekWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set GreekWine GreekWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set GreekWine GreekWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ] ] ]\n\n        if chance > weighted-trade-choice [\n\n          ;;The preference slider only influences who Gauls initiate trade with.\n          ;;The closer the slider is to 0 the more it favors Etruscan wine, while the closer it is to 100 the more it favors Greek wine.\n          ;; Note that even with the slider all the way at 0 Greek colonists can still attempt to purchase grain from Gauls, so this doesn’t completely shut out trade.\n\n\n          ask lineageA [\n            if storage >= 60 [\n              if count lineageB1 > 1 [\n                ask one-of lineageB1 [\n                  set a xcor\n                  set b ycor\n                  if EtruscanWine >= 10 [\n                    set energy energy + GrainTradeRate\n                    set EtruscanWine EtruscanWine - 10 ] ]\n                set thisDistance  distancexy a b\n                set storage storage - GrainTradeRate\n                set EtruscanWine EtruscanWine + 10\n                set storage storage -  thisDistance * 0.25 ]\n            ]\n          ]\n        ]\n      ]\n    ]\n  ]\n\nend\n\nto consumeGreekWine\n  if GreekWine > 1 [\n    set GreekWine GreekWine - 1\n  ]\nend\n\n\nto consumeEtruscanWine\n  if EtruscanWine > 1 [\n    set EtruscanWine EtruscanWine - 1\n  ]\nend\n\nto decayMetals\n  if metal > 1 [\n    set metal metal - 1\n  ]\nend\n\n;; each tick Gaulish agents take fallow fields and plant them. They gain a certain amount of energy from fields and can only extract\n;; more energy if they plant more\nto make-my-farm\n  if pcolor != brown [\n    set pcolor cyan ;;\n  ]\nend\n\nto plant\n  ;;ethnographically, people use beer parties to help with planting costs, so here wine makes planting easier!\n  if pcolor != brown [\n    set pcolor cyan ;; this way we can differentiate between unfarmed patches, dead patches, and farmed patches\n    set energy energy - planting-calories  ;; agents expend energy by planting\n    if (EtruscanWine > 1) or (GreekWine > 1)\n    [ set energy energy + 1 ]\n    death\n  ]\nend\n\nto harvest\n  if pcolor = cyan [ ;;again, only those patches with the pcolor cyan can be harvested as a field\n    set energy energy + harvest-amount   ;; harvest amount is how much agents get from each farm patch\n    set energy energy - harvest-calories  ;; it costs calories to harvest grain\n    set total-harvest total-harvest + harvest-amount\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    death\n  ]\nend\n\nto eat-grain\n  set energy energy - 1 ;; agents basic metabolic needs, they need to eat 1 each year to survive\nend\n\nto  store-grain\n  set storage storage + energy\n  set energy energy - energy\n  death\n\nend\n\n;; what I need to do: agents look at how much they're charged for planting, keep that in their regular storage, then make an outside storage\n;; any extra grain they have can go in those coffers\n;; so I need to transfer immediate energy to stored energy\n;; and they only reproduce when their *stored* energy is high\n\nto check-ownership\n  ask patches [\n    if count turtles-here > 0\n    [ set owned? true ] ]\nend\n\nto landing-Greek-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set GreekWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto landing-Etruscan-colonists\n  hatch number-Colonists [ rt random-float 360 fd 1 ]\n  set energy 39\n  set EtruscanWine 20\n\n  ;; we create here the number of colonists from the slider minus 1; since we start with 1 colonist at a random tick, simulating the "boat" landing\n  ;; we need to then spawn the number of colonists we want - 1 so that we start with the number we think we do\nend\n\nto plantVineyard\n  if pcolor != blue [\n    set pcolor red\n    set energy energy - planting-calories ;; agents are charged the same to plant wine as they are to plant grain\n    death ]\nend\n\nto harvestWineEtruscans\n  if pcolor = red [\n    set pcolor lime\n    set EtruscanWine EtruscanWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto harvestWineGreeks\n  if pcolor = red [\n    set pcolor lime\n    set GreekWine GreekWine + 10\n    set total-amphora total-amphora + 10\n    if metal  >= 1 [\n      set energy energy + 1\n    ]\n    set energy energy - harvest-calories * 2\n    death\n  ]\nend\n\nto more-farms\n  death\n\nend\n\nto-report Etruscan-wine-wealth\n  report [EtruscanWine] of turtles\nend\n\nto measure\n  set run-n run-n + 1\n  setup\n  repeat 10 [ go ]\n  output-print (word run-n ", " weighted-trade-choice ", " metals? ", " count turtles ", " count lineageA ", " count lineageB1 ", " count lineageB2 ", "  total-amphora)\nend\n\nto export-turtles\n  output-print (word "turtle, breed, x, y, energy")\n  ask turtles [\n    output-print (word who ", " breed ", " xcor ", " ycor ", " energy)\n  ]\n  export-output "AmphorABM_turtles.csv"\n  \nend\n\nto batch-run\n  set run-n 0\n  output-print (word "run, weighted-trade-choice, metals, count turtles, count lineageA, count lineageB1, count lineageB2, total-amphora")\n  set weighted-trade-choice 0\n  while [weighted-trade-choice <= 100] [\n    set metals? true\n    measure\n    set metals? false\n    measure\n    set weighted-trade-choice weighted-trade-choice + 25\n  ]\n  clear-all\n  export-output "AmphorABM_output.csv"\nend\n`,
		},
		complexAdvanceOn: function() {
			advanceOnRecompile();
		},
	},
	{
		text:'<p>'
		+  'Now it is time to run our experiments. First, press clear on the command center and then click the <code class="buttonName">batch-run</code> button.'
		+'</p>'
		+'<p>'
		+  '<b>This can take up to half an hour and the web page may appear to freeze!</b> Moving to a different tab and back sometimes updates the Command Center. '
		+  'If you find that your computer is not powerful enough for this, move on to the next step and we will provide you with a sample file.'
		+'</p>',
		attachTo:{
			on: 'right',
			element: '.netlogo-display-horizontal',
		},
	},		
	{
		text:'<p>'
		+  'A csv file <a href="assets/files/AmphorABM_output.csv" download>like this</a> should have been downloaded now. '
		+  'Because this model incorporates stochasticity the values may be slightly different.'
		+'</p>'
		+'<p>'
		+  'As mentioned before, analysis and interpretation are important aspects of the modeling process, but unfortunately, they are beyond the scope of this lesson.'
		+'</p>'
		+'<p>'
		+  'If you want, you can analyze this data using the software of your choice (Excel, R, Python), or head to the Agent-based Modeling for Archaeology book, '
		+  'follow the tutorial in chapter 9, starting on page 326.'
		+'</p>'
	},	
	{
		text:'<p>'
		+  'This lesson has introduced some of the practicalities of exporting data in NetLogo.'
		+'</p>'
		+'<p>'
		+  'In it, you have:'
		+'</p>'
		+'<ul>'
			+'<li>gained knowledge of basic export primitives;</li>'
			+'<li>been introduced to BehaviorSpace;</li>'
			+'<li>have practiced analysing model output.</li>'
		+'</ul>'
		+'<p>'
		+  'While it is possible to run small batches of experiments that vary a limited amount of parameters in Netlogo Web, '
		+  'for more complex and time-consuming experiments Netlogo Desktop is better suited. In addition to '
		+  '<a href = "https://ccl.northwestern.edu/netlogo/docs/behaviorspace.html" target="_blank" rel="noopener noreferrer">BehaviorSpace<\a>, it offers a '
		+  '<a href = " https://ccl.northwestern.edu/netlogo/docs/behaviorspace.html#advanced-usage" target="_blank" rel="noopener noreferrer">Headless mode<\a> '
		+  'that you can run from the command line to save on GPU usage and <a href = "https://ccl.northwestern.edu/netlogo/docs/programming.html#file-io " target="_blank" rel="noopener noreferrer">'
		+  'more flexibility for reading and writing to files that are stored on your computer<\a>.'
		+'</p>'
		+'<p>'
		+  'While there are some differences between NetLogo Web and Desktop in terms of interface and available extensions, the syntax is the same for both, '
		+  'and everything you have learned in this lesson and other tutorials is transferable.'
		+'</p>'
	},
 ];
